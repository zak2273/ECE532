// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module relu_array_ap_fixed_4u_array_ap_ufixed_6_0_4_0_0_4u_relu_config4_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
output  [5:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [5:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [5:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [5:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;

reg ap_done;
reg ap_idle;
reg start_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_reg_767;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    res_V_data_0_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] tmp_reg_767_pp0_iter2_reg;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg   [12:0] i_reg_208;
wire   [0:0] tmp_fu_219_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    data_V_data_0_V0_status;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    res_V_data_0_V1_status;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_reg_767_pp0_iter1_reg;
wire   [12:0] i_3_fu_225_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [15:0] tmp_data_0_V_reg_776;
reg   [15:0] tmp_data_1_V_reg_785;
reg   [15:0] tmp_data_2_V_reg_794;
reg   [15:0] tmp_data_3_V_reg_803;
wire   [0:0] r_4_fu_251_p2;
reg   [0:0] r_4_reg_812;
wire   [0:0] Range1_all_ones_fu_267_p2;
reg   [0:0] Range1_all_ones_reg_817;
wire   [0:0] Range1_all_zeros_fu_273_p2;
reg   [0:0] Range1_all_zeros_reg_822;
wire   [0:0] r_4_1_fu_283_p2;
reg   [0:0] r_4_1_reg_827;
wire   [0:0] Range1_all_ones_1_fu_299_p2;
reg   [0:0] Range1_all_ones_1_reg_832;
wire   [0:0] Range1_all_zeros_1_fu_305_p2;
reg   [0:0] Range1_all_zeros_1_reg_837;
wire   [0:0] r_4_2_fu_315_p2;
reg   [0:0] r_4_2_reg_842;
wire   [0:0] Range1_all_ones_2_fu_331_p2;
reg   [0:0] Range1_all_ones_2_reg_847;
wire   [0:0] Range1_all_zeros_2_fu_337_p2;
reg   [0:0] Range1_all_zeros_2_reg_852;
wire   [0:0] r_4_3_fu_347_p2;
reg   [0:0] r_4_3_reg_857;
wire   [0:0] Range1_all_ones_3_fu_363_p2;
reg   [0:0] Range1_all_ones_3_reg_862;
wire   [0:0] Range1_all_zeros_3_fu_369_p2;
reg   [0:0] Range1_all_zeros_3_reg_867;
wire   [5:0] tmp_data_0_V_3_fu_465_p3;
reg   [5:0] tmp_data_0_V_3_reg_872;
wire   [5:0] tmp_data_1_V_3_fu_563_p3;
reg   [5:0] tmp_data_1_V_3_reg_877;
wire   [5:0] tmp_data_2_V_3_fu_661_p3;
reg   [5:0] tmp_data_2_V_3_reg_882;
wire   [5:0] tmp_data_3_V_3_fu_759_p3;
reg   [5:0] tmp_data_3_V_3_reg_887;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    data_V_data_0_V0_update;
reg    res_V_data_0_V1_update;
reg    ap_block_pp0_stage0_01001;
wire   [2:0] tmp_85_fu_247_p1;
wire   [5:0] p_Result_5_fu_257_p4;
wire   [2:0] tmp_90_fu_279_p1;
wire   [5:0] p_Result_24_1_fu_289_p4;
wire   [2:0] tmp_95_fu_311_p1;
wire   [5:0] p_Result_24_2_fu_321_p4;
wire   [2:0] tmp_100_fu_343_p1;
wire   [5:0] p_Result_24_3_fu_353_p4;
wire   [0:0] tmp_84_fu_389_p3;
wire   [0:0] r_fu_403_p2;
wire   [0:0] tmp_87_fu_408_p3;
wire   [0:0] tmp_9_fu_415_p2;
wire   [5:0] tmp_100_cast_fu_421_p1;
wire   [5:0] p_Val2_s_fu_380_p4;
wire   [5:0] p_Val2_2_fu_425_p2;
wire   [0:0] tmp_88_fu_431_p3;
wire   [0:0] tmp_86_fu_396_p3;
wire   [0:0] rev_fu_439_p2;
wire   [0:0] carry_3_fu_445_p2;
wire   [0:0] deleted_zeros_fu_451_p3;
wire   [0:0] tmp_6_fu_375_p2;
wire   [5:0] p_mux_fu_457_p3;
wire   [0:0] tmp_89_fu_487_p3;
wire   [0:0] r_1_fu_501_p2;
wire   [0:0] tmp_92_fu_506_p3;
wire   [0:0] tmp_100_1_fu_513_p2;
wire   [5:0] tmp_100_1_cast_fu_519_p1;
wire   [5:0] p_Val2_12_1_fu_478_p4;
wire   [5:0] p_Val2_13_1_fu_523_p2;
wire   [0:0] tmp_93_fu_529_p3;
wire   [0:0] tmp_91_fu_494_p3;
wire   [0:0] rev8_fu_537_p2;
wire   [0:0] carry_3_1_fu_543_p2;
wire   [0:0] deleted_zeros_1_fu_549_p3;
wire   [0:0] tmp_94_1_fu_473_p2;
wire   [5:0] p_mux_1_fu_555_p3;
wire   [0:0] tmp_94_fu_585_p3;
wire   [0:0] r_2_fu_599_p2;
wire   [0:0] tmp_97_fu_604_p3;
wire   [0:0] tmp_100_2_fu_611_p2;
wire   [5:0] tmp_100_2_cast_fu_617_p1;
wire   [5:0] p_Val2_12_2_fu_576_p4;
wire   [5:0] p_Val2_13_2_fu_621_p2;
wire   [0:0] tmp_98_fu_627_p3;
wire   [0:0] tmp_96_fu_592_p3;
wire   [0:0] rev7_fu_635_p2;
wire   [0:0] carry_3_2_fu_641_p2;
wire   [0:0] deleted_zeros_2_fu_647_p3;
wire   [0:0] tmp_94_2_fu_571_p2;
wire   [5:0] p_mux_2_fu_653_p3;
wire   [0:0] tmp_99_fu_683_p3;
wire   [0:0] r_3_fu_697_p2;
wire   [0:0] tmp_102_fu_702_p3;
wire   [0:0] tmp_100_3_fu_709_p2;
wire   [5:0] tmp_100_3_cast_fu_715_p1;
wire   [5:0] p_Val2_12_3_fu_674_p4;
wire   [5:0] p_Val2_13_3_fu_719_p2;
wire   [0:0] tmp_103_fu_725_p3;
wire   [0:0] tmp_101_fu_690_p3;
wire   [0:0] rev9_fu_733_p2;
wire   [0:0] carry_3_3_fu_739_p2;
wire   [0:0] deleted_zeros_3_fu_745_p3;
wire   [0:0] tmp_94_3_fu_669_p2;
wire   [5:0] p_mux_3_fu_751_p3;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_219_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_208 <= i_3_fu_225_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_208 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_767 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Range1_all_ones_1_reg_832 <= Range1_all_ones_1_fu_299_p2;
        Range1_all_ones_2_reg_847 <= Range1_all_ones_2_fu_331_p2;
        Range1_all_ones_3_reg_862 <= Range1_all_ones_3_fu_363_p2;
        Range1_all_ones_reg_817 <= Range1_all_ones_fu_267_p2;
        Range1_all_zeros_1_reg_837 <= Range1_all_zeros_1_fu_305_p2;
        Range1_all_zeros_2_reg_852 <= Range1_all_zeros_2_fu_337_p2;
        Range1_all_zeros_3_reg_867 <= Range1_all_zeros_3_fu_369_p2;
        Range1_all_zeros_reg_822 <= Range1_all_zeros_fu_273_p2;
        r_4_1_reg_827 <= r_4_1_fu_283_p2;
        r_4_2_reg_842 <= r_4_2_fu_315_p2;
        r_4_3_reg_857 <= r_4_3_fu_347_p2;
        r_4_reg_812 <= r_4_fu_251_p2;
        tmp_data_0_V_reg_776 <= data_V_data_0_V_dout;
        tmp_data_1_V_reg_785 <= data_V_data_1_V_dout;
        tmp_data_2_V_reg_794 <= data_V_data_2_V_dout;
        tmp_data_3_V_reg_803 <= data_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_767_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_3_reg_872 <= tmp_data_0_V_3_fu_465_p3;
        tmp_data_1_V_3_reg_877 <= tmp_data_1_V_3_fu_563_p3;
        tmp_data_2_V_3_reg_882 <= tmp_data_2_V_3_fu_661_p3;
        tmp_data_3_V_3_reg_887 <= tmp_data_3_V_3_fu_759_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_reg_767 <= tmp_fu_219_p2;
        tmp_reg_767_pp0_iter1_reg <= tmp_reg_767;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        tmp_reg_767_pp0_iter2_reg <= tmp_reg_767_pp0_iter1_reg;
    end
end

always @ (*) begin
    if ((tmp_fu_219_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_767 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_0_V0_update = 1'b1;
    end else begin
        data_V_data_0_V0_update = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_767 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_767 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_767 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_767 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((tmp_reg_767_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_0_V1_update = 1'b1;
    end else begin
        res_V_data_0_V1_update = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_767_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_767_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_767_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_767_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (tmp_fu_219_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (tmp_fu_219_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_1_fu_299_p2 = ((p_Result_24_1_fu_289_p4 == 6'd63) ? 1'b1 : 1'b0);

assign Range1_all_ones_2_fu_331_p2 = ((p_Result_24_2_fu_321_p4 == 6'd63) ? 1'b1 : 1'b0);

assign Range1_all_ones_3_fu_363_p2 = ((p_Result_24_3_fu_353_p4 == 6'd63) ? 1'b1 : 1'b0);

assign Range1_all_ones_fu_267_p2 = ((p_Result_5_fu_257_p4 == 6'd63) ? 1'b1 : 1'b0);

assign Range1_all_zeros_1_fu_305_p2 = ((p_Result_24_1_fu_289_p4 == 6'd0) ? 1'b1 : 1'b0);

assign Range1_all_zeros_2_fu_337_p2 = ((p_Result_24_2_fu_321_p4 == 6'd0) ? 1'b1 : 1'b0);

assign Range1_all_zeros_3_fu_369_p2 = ((p_Result_24_3_fu_353_p4 == 6'd0) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_273_p2 = ((p_Result_5_fu_257_p4 == 6'd0) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((tmp_reg_767_pp0_iter2_reg == 1'd0) & (res_V_data_0_V1_status == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((tmp_reg_767 == 1'd0) & (data_V_data_0_V0_status == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((tmp_reg_767_pp0_iter2_reg == 1'd0) & (res_V_data_0_V1_status == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((tmp_reg_767 == 1'd0) & (data_V_data_0_V0_status == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((tmp_reg_767_pp0_iter2_reg == 1'd0) & (res_V_data_0_V1_status == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((tmp_reg_767 == 1'd0) & (data_V_data_0_V0_status == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((tmp_reg_767 == 1'd0) & (data_V_data_0_V0_status == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((tmp_reg_767_pp0_iter2_reg == 1'd0) & (res_V_data_0_V1_status == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign carry_3_1_fu_543_p2 = (tmp_91_fu_494_p3 & rev8_fu_537_p2);

assign carry_3_2_fu_641_p2 = (tmp_96_fu_592_p3 & rev7_fu_635_p2);

assign carry_3_3_fu_739_p2 = (tmp_101_fu_690_p3 & rev9_fu_733_p2);

assign carry_3_fu_445_p2 = (tmp_86_fu_396_p3 & rev_fu_439_p2);

assign data_V_data_0_V0_status = (data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign data_V_data_0_V_read = data_V_data_0_V0_update;

assign data_V_data_1_V_read = data_V_data_0_V0_update;

assign data_V_data_2_V_read = data_V_data_0_V0_update;

assign data_V_data_3_V_read = data_V_data_0_V0_update;

assign deleted_zeros_1_fu_549_p3 = ((carry_3_1_fu_543_p2[0:0] === 1'b1) ? Range1_all_ones_1_reg_832 : Range1_all_zeros_1_reg_837);

assign deleted_zeros_2_fu_647_p3 = ((carry_3_2_fu_641_p2[0:0] === 1'b1) ? Range1_all_ones_2_reg_847 : Range1_all_zeros_2_reg_852);

assign deleted_zeros_3_fu_745_p3 = ((carry_3_3_fu_739_p2[0:0] === 1'b1) ? Range1_all_ones_3_reg_862 : Range1_all_zeros_3_reg_867);

assign deleted_zeros_fu_451_p3 = ((carry_3_fu_445_p2[0:0] === 1'b1) ? Range1_all_ones_reg_817 : Range1_all_zeros_reg_822);

assign i_3_fu_225_p2 = (i_reg_208 + 13'd1);

assign p_Result_24_1_fu_289_p4 = {{data_V_data_1_V_dout[15:10]}};

assign p_Result_24_2_fu_321_p4 = {{data_V_data_2_V_dout[15:10]}};

assign p_Result_24_3_fu_353_p4 = {{data_V_data_3_V_dout[15:10]}};

assign p_Result_5_fu_257_p4 = {{data_V_data_0_V_dout[15:10]}};

assign p_Val2_12_1_fu_478_p4 = {{tmp_data_1_V_reg_785[9:4]}};

assign p_Val2_12_2_fu_576_p4 = {{tmp_data_2_V_reg_794[9:4]}};

assign p_Val2_12_3_fu_674_p4 = {{tmp_data_3_V_reg_803[9:4]}};

assign p_Val2_13_1_fu_523_p2 = (tmp_100_1_cast_fu_519_p1 + p_Val2_12_1_fu_478_p4);

assign p_Val2_13_2_fu_621_p2 = (tmp_100_2_cast_fu_617_p1 + p_Val2_12_2_fu_576_p4);

assign p_Val2_13_3_fu_719_p2 = (tmp_100_3_cast_fu_715_p1 + p_Val2_12_3_fu_674_p4);

assign p_Val2_2_fu_425_p2 = (tmp_100_cast_fu_421_p1 + p_Val2_s_fu_380_p4);

assign p_Val2_s_fu_380_p4 = {{tmp_data_0_V_reg_776[9:4]}};

assign p_mux_1_fu_555_p3 = ((deleted_zeros_1_fu_549_p3[0:0] === 1'b1) ? p_Val2_13_1_fu_523_p2 : 6'd63);

assign p_mux_2_fu_653_p3 = ((deleted_zeros_2_fu_647_p3[0:0] === 1'b1) ? p_Val2_13_2_fu_621_p2 : 6'd63);

assign p_mux_3_fu_751_p3 = ((deleted_zeros_3_fu_745_p3[0:0] === 1'b1) ? p_Val2_13_3_fu_719_p2 : 6'd63);

assign p_mux_fu_457_p3 = ((deleted_zeros_fu_451_p3[0:0] === 1'b1) ? p_Val2_2_fu_425_p2 : 6'd63);

assign r_1_fu_501_p2 = (tmp_89_fu_487_p3 | r_4_1_reg_827);

assign r_2_fu_599_p2 = (tmp_94_fu_585_p3 | r_4_2_reg_842);

assign r_3_fu_697_p2 = (tmp_99_fu_683_p3 | r_4_3_reg_857);

assign r_4_1_fu_283_p2 = ((tmp_90_fu_279_p1 != 3'd0) ? 1'b1 : 1'b0);

assign r_4_2_fu_315_p2 = ((tmp_95_fu_311_p1 != 3'd0) ? 1'b1 : 1'b0);

assign r_4_3_fu_347_p2 = ((tmp_100_fu_343_p1 != 3'd0) ? 1'b1 : 1'b0);

assign r_4_fu_251_p2 = ((tmp_85_fu_247_p1 != 3'd0) ? 1'b1 : 1'b0);

assign r_fu_403_p2 = (tmp_84_fu_389_p3 | r_4_reg_812);

assign res_V_data_0_V1_status = (res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign res_V_data_0_V_din = tmp_data_0_V_3_reg_872;

assign res_V_data_0_V_write = res_V_data_0_V1_update;

assign res_V_data_1_V_din = tmp_data_1_V_3_reg_877;

assign res_V_data_1_V_write = res_V_data_0_V1_update;

assign res_V_data_2_V_din = tmp_data_2_V_3_reg_882;

assign res_V_data_2_V_write = res_V_data_0_V1_update;

assign res_V_data_3_V_din = tmp_data_3_V_3_reg_887;

assign res_V_data_3_V_write = res_V_data_0_V1_update;

assign rev7_fu_635_p2 = (tmp_98_fu_627_p3 ^ 1'd1);

assign rev8_fu_537_p2 = (tmp_93_fu_529_p3 ^ 1'd1);

assign rev9_fu_733_p2 = (tmp_103_fu_725_p3 ^ 1'd1);

assign rev_fu_439_p2 = (tmp_88_fu_431_p3 ^ 1'd1);

assign start_out = real_start;

assign tmp_100_1_cast_fu_519_p1 = tmp_100_1_fu_513_p2;

assign tmp_100_1_fu_513_p2 = (tmp_92_fu_506_p3 & r_1_fu_501_p2);

assign tmp_100_2_cast_fu_617_p1 = tmp_100_2_fu_611_p2;

assign tmp_100_2_fu_611_p2 = (tmp_97_fu_604_p3 & r_2_fu_599_p2);

assign tmp_100_3_cast_fu_715_p1 = tmp_100_3_fu_709_p2;

assign tmp_100_3_fu_709_p2 = (tmp_102_fu_702_p3 & r_3_fu_697_p2);

assign tmp_100_cast_fu_421_p1 = tmp_9_fu_415_p2;

assign tmp_100_fu_343_p1 = data_V_data_3_V_dout[2:0];

assign tmp_101_fu_690_p3 = tmp_data_3_V_reg_803[32'd9];

assign tmp_102_fu_702_p3 = tmp_data_3_V_reg_803[32'd3];

assign tmp_103_fu_725_p3 = p_Val2_13_3_fu_719_p2[32'd5];

assign tmp_6_fu_375_p2 = (($signed(tmp_data_0_V_reg_776) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign tmp_84_fu_389_p3 = tmp_data_0_V_reg_776[32'd4];

assign tmp_85_fu_247_p1 = data_V_data_0_V_dout[2:0];

assign tmp_86_fu_396_p3 = tmp_data_0_V_reg_776[32'd9];

assign tmp_87_fu_408_p3 = tmp_data_0_V_reg_776[32'd3];

assign tmp_88_fu_431_p3 = p_Val2_2_fu_425_p2[32'd5];

assign tmp_89_fu_487_p3 = tmp_data_1_V_reg_785[32'd4];

assign tmp_90_fu_279_p1 = data_V_data_1_V_dout[2:0];

assign tmp_91_fu_494_p3 = tmp_data_1_V_reg_785[32'd9];

assign tmp_92_fu_506_p3 = tmp_data_1_V_reg_785[32'd3];

assign tmp_93_fu_529_p3 = p_Val2_13_1_fu_523_p2[32'd5];

assign tmp_94_1_fu_473_p2 = (($signed(tmp_data_1_V_reg_785) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign tmp_94_2_fu_571_p2 = (($signed(tmp_data_2_V_reg_794) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign tmp_94_3_fu_669_p2 = (($signed(tmp_data_3_V_reg_803) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign tmp_94_fu_585_p3 = tmp_data_2_V_reg_794[32'd4];

assign tmp_95_fu_311_p1 = data_V_data_2_V_dout[2:0];

assign tmp_96_fu_592_p3 = tmp_data_2_V_reg_794[32'd9];

assign tmp_97_fu_604_p3 = tmp_data_2_V_reg_794[32'd3];

assign tmp_98_fu_627_p3 = p_Val2_13_2_fu_621_p2[32'd5];

assign tmp_99_fu_683_p3 = tmp_data_3_V_reg_803[32'd4];

assign tmp_9_fu_415_p2 = (tmp_87_fu_408_p3 & r_fu_403_p2);

assign tmp_data_0_V_3_fu_465_p3 = ((tmp_6_fu_375_p2[0:0] === 1'b1) ? p_mux_fu_457_p3 : 6'd0);

assign tmp_data_1_V_3_fu_563_p3 = ((tmp_94_1_fu_473_p2[0:0] === 1'b1) ? p_mux_1_fu_555_p3 : 6'd0);

assign tmp_data_2_V_3_fu_661_p3 = ((tmp_94_2_fu_571_p2[0:0] === 1'b1) ? p_mux_2_fu_653_p3 : 6'd0);

assign tmp_data_3_V_3_fu_759_p3 = ((tmp_94_3_fu_669_p2[0:0] === 1'b1) ? p_mux_3_fu_751_p3 : 6'd0);

assign tmp_fu_219_p2 = ((i_reg_208 == 13'd4661) ? 1'b1 : 1'b0);

endmodule //relu_array_ap_fixed_4u_array_ap_ufixed_6_0_4_0_0_4u_relu_config4_s
