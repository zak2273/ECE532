// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_stable_array_array_ap_fixed_16_6_5_3_0_4u_softmax_config21_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        res_V_data_0_V_TREADY,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        res_V_data_0_V_TDATA,
        res_V_data_0_V_TVALID,
        res_V_data_1_V_TDATA,
        res_V_data_1_V_TVALID,
        res_V_data_1_V_TREADY,
        res_V_data_2_V_TDATA,
        res_V_data_2_V_TVALID,
        res_V_data_2_V_TREADY,
        res_V_data_3_V_TDATA,
        res_V_data_3_V_TVALID,
        res_V_data_3_V_TREADY,
        data_V_data_0_V_blk_n,
        data_V_data_1_V_blk_n,
        data_V_data_2_V_blk_n,
        data_V_data_3_V_blk_n,
        res_V_data_0_V_TDATA_blk_n,
        res_V_data_1_V_TDATA_blk_n,
        res_V_data_2_V_TDATA_blk_n,
        res_V_data_3_V_TDATA_blk_n
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   res_V_data_0_V_TREADY;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
output  [15:0] res_V_data_0_V_TDATA;
output   res_V_data_0_V_TVALID;
output  [15:0] res_V_data_1_V_TDATA;
output   res_V_data_1_V_TVALID;
input   res_V_data_1_V_TREADY;
output  [15:0] res_V_data_2_V_TDATA;
output   res_V_data_2_V_TVALID;
input   res_V_data_2_V_TREADY;
output  [15:0] res_V_data_3_V_TDATA;
output   res_V_data_3_V_TVALID;
input   res_V_data_3_V_TREADY;
output   data_V_data_0_V_blk_n;
output   data_V_data_1_V_blk_n;
output   data_V_data_2_V_blk_n;
output   data_V_data_3_V_blk_n;
output   res_V_data_0_V_TDATA_blk_n;
output   res_V_data_1_V_TDATA_blk_n;
output   res_V_data_2_V_TDATA_blk_n;
output   res_V_data_3_V_TDATA_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg res_V_data_0_V_TVALID;
reg res_V_data_1_V_TVALID;
reg res_V_data_2_V_TVALID;
reg res_V_data_3_V_TVALID;
reg data_V_data_0_V_blk_n;
reg data_V_data_1_V_blk_n;
reg data_V_data_2_V_blk_n;
reg data_V_data_3_V_blk_n;
reg res_V_data_0_V_TDATA_blk_n;
reg res_V_data_1_V_TDATA_blk_n;
reg res_V_data_2_V_TDATA_blk_n;
reg res_V_data_3_V_TDATA_blk_n;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state8_pp0_stage3_iter1;
wire    ap_block_state12_pp0_stage3_iter2;
wire    ap_block_state16_pp0_stage3_iter3;
wire    ap_block_state20_pp0_stage3_iter4;
reg    ap_block_pp0_stage3_11001;
reg   [9:0] exp_table2_address0;
reg    exp_table2_ce0;
wire   [16:0] exp_table2_q0;
wire   [9:0] invert_table3_address0;
reg    invert_table3_ce0;
wire   [17:0] invert_table3_q0;
wire    ap_block_pp0_stage3;
reg  signed [15:0] tmp_data_0_V_1_reg_810;
wire    data_V_data_0_V0_status;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state9_pp0_stage0_iter2;
wire    ap_block_state13_pp0_stage0_iter3;
wire    ap_block_state17_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
reg  signed [15:0] tmp_data_1_V_1_reg_817;
reg  signed [15:0] tmp_data_2_V_1_reg_824;
reg  signed [15:0] tmp_data_3_V_1_reg_831;
wire   [0:0] tmp_i_i_i_fu_269_p2;
reg   [0:0] tmp_i_i_i_reg_838;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_state10_pp0_stage1_iter2;
wire    ap_block_state14_pp0_stage1_iter3;
wire    ap_block_state18_pp0_stage1_iter4;
wire    ap_block_pp0_stage1_11001;
wire   [0:0] tmp_i_i8_i_fu_273_p2;
reg   [0:0] tmp_i_i8_i_reg_843;
wire   [15:0] agg_result_i_i_i_fu_277_p3;
reg   [15:0] agg_result_i_i_i_reg_848;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_state11_pp0_stage2_iter2;
wire    ap_block_state15_pp0_stage2_iter3;
wire    ap_block_state19_pp0_stage2_iter4;
wire    ap_block_pp0_stage2_11001;
wire   [15:0] agg_result_i_i9_i_fu_282_p3;
reg   [15:0] agg_result_i_i9_i_reg_853;
wire   [0:0] tmp_i10_i_fu_287_p2;
reg   [0:0] tmp_i10_i_reg_858;
reg   [0:0] tmp_22_reg_863;
reg   [0:0] tmp_23_reg_870;
reg   [0:0] tmp_24_reg_877;
reg   [0:0] tmp_25_reg_884;
reg   [0:0] tmp_26_reg_891;
reg   [0:0] tmp_27_reg_898;
reg   [0:0] tmp_28_reg_905;
reg   [0:0] tmp_29_reg_912;
reg   [9:0] tmp_5_reg_919;
reg   [9:0] tmp_10_reg_925;
reg   [9:0] tmp_13_reg_931;
reg   [9:0] tmp_16_reg_937;
wire   [9:0] y_V_fu_552_p3;
reg   [9:0] y_V_reg_943;
wire   [9:0] y_V_1_fu_574_p3;
reg   [9:0] y_V_1_reg_948;
wire   [9:0] y_V_2_fu_596_p3;
reg   [9:0] y_V_2_reg_953;
wire   [9:0] y_V_3_fu_618_p3;
reg   [9:0] y_V_3_reg_958;
reg   [16:0] exp_res_0_V_reg_968;
reg   [16:0] exp_res_0_V_reg_968_pp0_iter2_reg;
reg   [16:0] exp_res_0_V_reg_968_pp0_iter3_reg;
reg   [16:0] exp_res_1_V_reg_979;
reg   [16:0] exp_res_1_V_reg_979_pp0_iter2_reg;
reg   [16:0] exp_res_1_V_reg_979_pp0_iter3_reg;
reg   [16:0] exp_res_2_V_reg_990;
reg   [16:0] exp_res_2_V_reg_990_pp0_iter3_reg;
reg   [16:0] exp_res_2_V_reg_990_pp0_iter4_reg;
reg   [16:0] exp_res_3_V_reg_1001;
reg   [16:0] exp_res_3_V_reg_1001_pp0_iter3_reg;
reg   [16:0] exp_res_3_V_reg_1001_pp0_iter4_reg;
wire  signed [17:0] p_Val2_14_fu_662_p3;
reg  signed [17:0] p_Val2_14_reg_1007;
wire  signed [17:0] p_Val2_4_fu_690_p3;
reg  signed [17:0] p_Val2_4_reg_1013;
reg   [0:0] p_Result_11_reg_1019;
reg   [0:0] p_Result_12_reg_1026;
reg   [9:0] tmp_19_reg_1033;
wire   [9:0] y_V_4_fu_778_p3;
reg   [9:0] y_V_4_reg_1039;
reg   [17:0] inv_exp_sum_V_reg_1049;
wire  signed [25:0] tmp_5_cast_fu_790_p1;
reg  signed [25:0] tmp_5_cast_reg_1054;
wire   [25:0] r_V_cast_fu_794_p1;
reg   [15:0] tmp_data_0_V_reg_1064;
wire   [25:0] r_V_1_cast_fu_798_p1;
reg   [15:0] tmp_data_1_V_reg_1074;
wire   [25:0] r_V_cast_38_fu_802_p1;
reg   [15:0] tmp_data_2_V_reg_1084;
wire   [25:0] r_V_3_cast_fu_806_p1;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage3_subdone;
wire   [63:0] tmp_7_fu_626_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] tmp_7_1_fu_630_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] tmp_7_2_fu_634_p1;
wire   [63:0] tmp_7_3_fu_638_p1;
wire   [63:0] tmp_4_fu_786_p1;
reg    data_V_data_0_V0_update;
wire    ap_block_pp0_stage3_01001;
reg  signed [17:0] grp_fu_222_p0;
reg   [16:0] grp_fu_222_p1;
wire   [25:0] grp_fu_222_p2;
wire   [15:0] x_max_V_fu_293_p3;
wire  signed [16:0] lhs_V_fu_298_p1;
wire  signed [16:0] rhs_V_fu_301_p1;
wire   [16:0] ret_V_fu_305_p2;
wire  signed [16:0] lhs_V_1_fu_327_p1;
wire   [16:0] ret_V_1_fu_330_p2;
wire  signed [16:0] lhs_V_2_fu_352_p1;
wire   [16:0] ret_V_2_fu_355_p2;
wire  signed [16:0] lhs_V_3_fu_377_p1;
wire   [16:0] ret_V_3_fu_380_p2;
wire   [0:0] tmp_s_fu_442_p2;
wire   [0:0] signbit_i_i_i_i13_0_not_fu_456_p2;
wire   [0:0] tmp_1_fu_466_p2;
wire   [0:0] signbit_i_i_i_i13_0_not_1_fu_480_p2;
wire   [0:0] tmp_2_fu_490_p2;
wire   [0:0] signbit_i_i_i_i13_0_not_2_fu_504_p2;
wire   [0:0] tmp_3_fu_514_p2;
wire   [0:0] signbit_i_i_i_i13_0_not_3_fu_528_p2;
wire   [0:0] brmerge1_fu_452_p2;
wire   [0:0] underflow_fu_447_p2;
wire   [0:0] brmerge2_fu_461_p2;
wire   [9:0] tmp_9_fu_538_p3;
wire   [9:0] tmp_2_33_fu_545_p3;
wire   [0:0] brmerge1_1_fu_476_p2;
wire   [0:0] underflow_1_fu_471_p2;
wire   [0:0] brmerge2_1_fu_485_p2;
wire   [9:0] tmp_11_fu_560_p3;
wire   [9:0] tmp_12_fu_567_p3;
wire   [0:0] brmerge1_2_fu_500_p2;
wire   [0:0] underflow_2_fu_495_p2;
wire   [0:0] brmerge2_2_fu_509_p2;
wire   [9:0] tmp_14_fu_582_p3;
wire   [9:0] tmp_15_fu_589_p3;
wire   [0:0] brmerge1_3_fu_524_p2;
wire   [0:0] underflow_3_fu_519_p2;
wire   [0:0] brmerge2_3_fu_533_p2;
wire   [9:0] tmp_17_fu_604_p3;
wire   [9:0] tmp_18_fu_611_p3;
wire   [17:0] p_Val2_6_fu_642_p1;
wire   [17:0] p_Val2_7_fu_645_p1;
wire   [17:0] p_Val2_8_fu_648_p2;
wire   [0:0] p_Result_s_fu_654_p3;
wire   [17:0] p_Val2_9_fu_670_p1;
wire   [17:0] p_Val2_1_fu_673_p1;
wire   [17:0] p_Val2_2_fu_676_p2;
wire   [0:0] p_Result_10_fu_682_p3;
wire  signed [18:0] rhs_V_1_fu_701_p1;
wire  signed [18:0] lhs_V_4_fu_698_p1;
wire   [18:0] ret_V_5_fu_704_p2;
wire   [17:0] p_Val2_16_fu_718_p2;
wire   [0:0] tmp_i_i_fu_740_p2;
wire   [0:0] p_Result_not_i_i_fu_754_p2;
wire   [0:0] brmerge3_i_i_fu_750_p2;
wire   [0:0] underflow_4_fu_745_p2;
wire   [0:0] brmerge2_i_i_fu_759_p2;
wire   [9:0] tmp_20_fu_764_p3;
wire   [9:0] tmp_21_fu_771_p3;
reg    grp_fu_222_ce;
reg   [3:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to4;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0_0to3;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

softmax_stable_array_array_ap_fixed_16_6_5_3_0_4u_softmax_config21_s_exp_table2 #(
    .DataWidth( 17 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table2_address0),
    .ce0(exp_table2_ce0),
    .q0(exp_table2_q0)
);

softmax_stable_array_array_ap_fixed_16_6_5_3_0_4u_softmax_config21_s_invert_tHfu #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table3_address0),
    .ce0(invert_table3_ce0),
    .q0(invert_table3_q0)
);

materials_net_mul_18s_17ns_26_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
materials_net_mul_18s_17ns_26_2_1_U462(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_222_p0),
    .din1(grp_fu_222_p1),
    .ce(grp_fu_222_ce),
    .dout(grp_fu_222_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        agg_result_i_i9_i_reg_853 <= agg_result_i_i9_i_fu_282_p3;
        agg_result_i_i_i_reg_848 <= agg_result_i_i_i_fu_277_p3;
        exp_res_0_V_reg_968_pp0_iter2_reg <= exp_res_0_V_reg_968;
        exp_res_0_V_reg_968_pp0_iter3_reg <= exp_res_0_V_reg_968_pp0_iter2_reg;
        inv_exp_sum_V_reg_1049 <= invert_table3_q0;
        p_Val2_14_reg_1007 <= p_Val2_14_fu_662_p3;
        p_Val2_4_reg_1013 <= p_Val2_4_fu_690_p3;
        tmp_i10_i_reg_858 <= tmp_i10_i_fu_287_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        exp_res_0_V_reg_968 <= exp_table2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        exp_res_1_V_reg_979 <= exp_table2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        exp_res_1_V_reg_979_pp0_iter2_reg <= exp_res_1_V_reg_979;
        exp_res_1_V_reg_979_pp0_iter3_reg <= exp_res_1_V_reg_979_pp0_iter2_reg;
        p_Result_11_reg_1019 <= ret_V_5_fu_704_p2[32'd18];
        p_Result_12_reg_1026 <= p_Val2_16_fu_718_p2[32'd17];
        tmp_10_reg_925 <= {{ret_V_1_fu_330_p2[15:6]}};
        tmp_13_reg_931 <= {{ret_V_2_fu_355_p2[15:6]}};
        tmp_16_reg_937 <= {{ret_V_3_fu_380_p2[15:6]}};
        tmp_19_reg_1033 <= {{p_Val2_16_fu_718_p2[17:8]}};
        tmp_22_reg_863 <= ret_V_fu_305_p2[32'd16];
        tmp_23_reg_870 <= ret_V_fu_305_p2[32'd15];
        tmp_24_reg_877 <= ret_V_1_fu_330_p2[32'd16];
        tmp_25_reg_884 <= ret_V_1_fu_330_p2[32'd15];
        tmp_26_reg_891 <= ret_V_2_fu_355_p2[32'd16];
        tmp_27_reg_898 <= ret_V_2_fu_355_p2[32'd15];
        tmp_28_reg_905 <= ret_V_3_fu_380_p2[32'd16];
        tmp_29_reg_912 <= ret_V_3_fu_380_p2[32'd15];
        tmp_5_cast_reg_1054 <= tmp_5_cast_fu_790_p1;
        tmp_5_reg_919 <= {{ret_V_fu_305_p2[15:6]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_res_2_V_reg_990 <= exp_table2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_res_2_V_reg_990_pp0_iter3_reg <= exp_res_2_V_reg_990;
        exp_res_2_V_reg_990_pp0_iter4_reg <= exp_res_2_V_reg_990_pp0_iter3_reg;
        tmp_data_0_V_1_reg_810 <= data_V_data_0_V_dout;
        tmp_data_1_V_1_reg_817 <= data_V_data_1_V_dout;
        tmp_data_2_V_1_reg_824 <= data_V_data_2_V_dout;
        tmp_data_3_V_1_reg_831 <= data_V_data_3_V_dout;
        y_V_1_reg_948 <= y_V_1_fu_574_p3;
        y_V_2_reg_953 <= y_V_2_fu_596_p3;
        y_V_3_reg_958 <= y_V_3_fu_618_p3;
        y_V_4_reg_1039 <= y_V_4_fu_778_p3;
        y_V_reg_943 <= y_V_fu_552_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        exp_res_3_V_reg_1001 <= exp_table2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        exp_res_3_V_reg_1001_pp0_iter3_reg <= exp_res_3_V_reg_1001;
        exp_res_3_V_reg_1001_pp0_iter4_reg <= exp_res_3_V_reg_1001_pp0_iter3_reg;
        tmp_i_i8_i_reg_843 <= tmp_i_i8_i_fu_273_p2;
        tmp_i_i_i_reg_838 <= tmp_i_i_i_fu_269_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_0_V_reg_1064 <= {{grp_fu_222_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_data_1_V_reg_1074 <= {{grp_fu_222_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp_data_2_V_reg_1084 <= {{grp_fu_222_p2[25:10]}};
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to4 = 1'b1;
    end else begin
        ap_idle_pp0_1to4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to3 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_0_V0_update = 1'b1;
    end else begin
        data_V_data_0_V0_update = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table2_address0 = tmp_7_3_fu_638_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage3))) begin
        exp_table2_address0 = tmp_7_2_fu_634_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        exp_table2_address0 = tmp_7_1_fu_630_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        exp_table2_address0 = tmp_7_fu_626_p1;
    end else begin
        exp_table2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        exp_table2_ce0 = 1'b1;
    end else begin
        exp_table2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        grp_fu_222_ce = 1'b1;
    end else begin
        grp_fu_222_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_222_p0 = tmp_5_cast_reg_1054;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage3))) begin
        grp_fu_222_p0 = tmp_5_cast_fu_790_p1;
    end else begin
        grp_fu_222_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_222_p1 = r_V_3_cast_fu_806_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_222_p1 = r_V_cast_38_fu_802_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_222_p1 = r_V_1_cast_fu_798_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage3))) begin
        grp_fu_222_p1 = r_V_cast_fu_794_p1;
    end else begin
        grp_fu_222_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        invert_table3_ce0 = 1'b1;
    end else begin
        invert_table3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage3))) begin
        res_V_data_0_V_TDATA_blk_n = res_V_data_0_V_TREADY;
    end else begin
        res_V_data_0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_V_data_0_V_TVALID = 1'b1;
    end else begin
        res_V_data_0_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage3))) begin
        res_V_data_1_V_TDATA_blk_n = res_V_data_1_V_TREADY;
    end else begin
        res_V_data_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_V_data_1_V_TVALID = 1'b1;
    end else begin
        res_V_data_1_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage3))) begin
        res_V_data_2_V_TDATA_blk_n = res_V_data_2_V_TREADY;
    end else begin
        res_V_data_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_V_data_2_V_TVALID = 1'b1;
    end else begin
        res_V_data_2_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage3))) begin
        res_V_data_3_V_TDATA_blk_n = res_V_data_3_V_TREADY;
    end else begin
        res_V_data_3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_V_data_3_V_TVALID = 1'b1;
    end else begin
        res_V_data_3_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to4 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage3_subdone)) | ((1'b0 == ap_block_pp0_stage3_subdone) & (ap_reset_idle_pp0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_i_i9_i_fu_282_p3 = ((tmp_i_i8_i_reg_843[0:0] === 1'b1) ? tmp_data_3_V_1_reg_831 : tmp_data_2_V_1_reg_824);

assign agg_result_i_i_i_fu_277_p3 = ((tmp_i_i_i_reg_838[0:0] === 1'b1) ? tmp_data_1_V_1_reg_817 : tmp_data_0_V_1_reg_810);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((ap_start == 1'b0) | (data_V_data_0_V0_status == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((ap_start == 1'b0) | (data_V_data_0_V0_status == 1'b0)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((res_V_data_0_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((res_V_data_0_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

assign ap_block_state10_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (data_V_data_0_V0_status == 1'b0));
end

assign ap_block_state20_pp0_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign brmerge1_1_fu_476_p2 = (tmp_25_reg_884 ^ tmp_24_reg_877);

assign brmerge1_2_fu_500_p2 = (tmp_27_reg_898 ^ tmp_26_reg_891);

assign brmerge1_3_fu_524_p2 = (tmp_29_reg_912 ^ tmp_28_reg_905);

assign brmerge1_fu_452_p2 = (tmp_23_reg_870 ^ tmp_22_reg_863);

assign brmerge2_1_fu_485_p2 = (tmp_25_reg_884 | signbit_i_i_i_i13_0_not_1_fu_480_p2);

assign brmerge2_2_fu_509_p2 = (tmp_27_reg_898 | signbit_i_i_i_i13_0_not_2_fu_504_p2);

assign brmerge2_3_fu_533_p2 = (tmp_29_reg_912 | signbit_i_i_i_i13_0_not_3_fu_528_p2);

assign brmerge2_fu_461_p2 = (tmp_23_reg_870 | signbit_i_i_i_i13_0_not_fu_456_p2);

assign brmerge2_i_i_fu_759_p2 = (p_Result_not_i_i_fu_754_p2 | p_Result_12_reg_1026);

assign brmerge3_i_i_fu_750_p2 = (p_Result_12_reg_1026 ^ p_Result_11_reg_1019);

assign data_V_data_0_V0_status = (data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign data_V_data_0_V_read = data_V_data_0_V0_update;

assign data_V_data_1_V_read = data_V_data_0_V0_update;

assign data_V_data_2_V_read = data_V_data_0_V0_update;

assign data_V_data_3_V_read = data_V_data_0_V0_update;

assign invert_table3_address0 = tmp_4_fu_786_p1;

assign lhs_V_1_fu_327_p1 = tmp_data_1_V_1_reg_817;

assign lhs_V_2_fu_352_p1 = tmp_data_2_V_1_reg_824;

assign lhs_V_3_fu_377_p1 = tmp_data_3_V_1_reg_831;

assign lhs_V_4_fu_698_p1 = p_Val2_14_reg_1007;

assign lhs_V_fu_298_p1 = tmp_data_0_V_1_reg_810;

assign p_Result_10_fu_682_p3 = p_Val2_2_fu_676_p2[32'd17];

assign p_Result_not_i_i_fu_754_p2 = (p_Result_11_reg_1019 ^ 1'd1);

assign p_Result_s_fu_654_p3 = p_Val2_8_fu_648_p2[32'd17];

assign p_Val2_14_fu_662_p3 = ((p_Result_s_fu_654_p3[0:0] === 1'b1) ? 18'd131071 : p_Val2_8_fu_648_p2);

assign p_Val2_16_fu_718_p2 = ($signed(p_Val2_14_reg_1007) + $signed(p_Val2_4_reg_1013));

assign p_Val2_1_fu_673_p1 = exp_res_3_V_reg_1001;

assign p_Val2_2_fu_676_p2 = (p_Val2_9_fu_670_p1 + p_Val2_1_fu_673_p1);

assign p_Val2_4_fu_690_p3 = ((p_Result_10_fu_682_p3[0:0] === 1'b1) ? 18'd131071 : p_Val2_2_fu_676_p2);

assign p_Val2_6_fu_642_p1 = exp_res_0_V_reg_968;

assign p_Val2_7_fu_645_p1 = exp_res_1_V_reg_979;

assign p_Val2_8_fu_648_p2 = (p_Val2_6_fu_642_p1 + p_Val2_7_fu_645_p1);

assign p_Val2_9_fu_670_p1 = exp_res_2_V_reg_990;

assign r_V_1_cast_fu_798_p1 = exp_res_1_V_reg_979_pp0_iter3_reg;

assign r_V_3_cast_fu_806_p1 = exp_res_3_V_reg_1001_pp0_iter4_reg;

assign r_V_cast_38_fu_802_p1 = exp_res_2_V_reg_990_pp0_iter4_reg;

assign r_V_cast_fu_794_p1 = exp_res_0_V_reg_968_pp0_iter3_reg;

assign res_V_data_0_V_TDATA = tmp_data_0_V_reg_1064;

assign res_V_data_1_V_TDATA = tmp_data_1_V_reg_1074;

assign res_V_data_2_V_TDATA = tmp_data_2_V_reg_1084;

assign res_V_data_3_V_TDATA = {{grp_fu_222_p2[25:10]}};

assign ret_V_1_fu_330_p2 = ($signed(lhs_V_1_fu_327_p1) - $signed(rhs_V_fu_301_p1));

assign ret_V_2_fu_355_p2 = ($signed(lhs_V_2_fu_352_p1) - $signed(rhs_V_fu_301_p1));

assign ret_V_3_fu_380_p2 = ($signed(lhs_V_3_fu_377_p1) - $signed(rhs_V_fu_301_p1));

assign ret_V_5_fu_704_p2 = ($signed(rhs_V_1_fu_701_p1) + $signed(lhs_V_4_fu_698_p1));

assign ret_V_fu_305_p2 = ($signed(lhs_V_fu_298_p1) - $signed(rhs_V_fu_301_p1));

assign rhs_V_1_fu_701_p1 = p_Val2_4_reg_1013;

assign rhs_V_fu_301_p1 = $signed(x_max_V_fu_293_p3);

assign signbit_i_i_i_i13_0_not_1_fu_480_p2 = (tmp_24_reg_877 ^ 1'd1);

assign signbit_i_i_i_i13_0_not_2_fu_504_p2 = (tmp_26_reg_891 ^ 1'd1);

assign signbit_i_i_i_i13_0_not_3_fu_528_p2 = (tmp_28_reg_905 ^ 1'd1);

assign signbit_i_i_i_i13_0_not_fu_456_p2 = (tmp_22_reg_863 ^ 1'd1);

assign tmp_11_fu_560_p3 = ((brmerge1_1_fu_476_p2[0:0] === 1'b1) ? 10'd511 : tmp_10_reg_925);

assign tmp_12_fu_567_p3 = ((underflow_1_fu_471_p2[0:0] === 1'b1) ? 10'd512 : tmp_10_reg_925);

assign tmp_14_fu_582_p3 = ((brmerge1_2_fu_500_p2[0:0] === 1'b1) ? 10'd511 : tmp_13_reg_931);

assign tmp_15_fu_589_p3 = ((underflow_2_fu_495_p2[0:0] === 1'b1) ? 10'd512 : tmp_13_reg_931);

assign tmp_17_fu_604_p3 = ((brmerge1_3_fu_524_p2[0:0] === 1'b1) ? 10'd511 : tmp_16_reg_937);

assign tmp_18_fu_611_p3 = ((underflow_3_fu_519_p2[0:0] === 1'b1) ? 10'd512 : tmp_16_reg_937);

assign tmp_1_fu_466_p2 = (tmp_25_reg_884 ^ 1'd1);

assign tmp_20_fu_764_p3 = ((brmerge3_i_i_fu_750_p2[0:0] === 1'b1) ? 10'd511 : tmp_19_reg_1033);

assign tmp_21_fu_771_p3 = ((underflow_4_fu_745_p2[0:0] === 1'b1) ? 10'd512 : tmp_19_reg_1033);

assign tmp_2_33_fu_545_p3 = ((underflow_fu_447_p2[0:0] === 1'b1) ? 10'd512 : tmp_5_reg_919);

assign tmp_2_fu_490_p2 = (tmp_27_reg_898 ^ 1'd1);

assign tmp_3_fu_514_p2 = (tmp_29_reg_912 ^ 1'd1);

assign tmp_4_fu_786_p1 = y_V_4_reg_1039;

assign tmp_5_cast_fu_790_p1 = $signed(inv_exp_sum_V_reg_1049);

assign tmp_7_1_fu_630_p1 = y_V_1_reg_948;

assign tmp_7_2_fu_634_p1 = y_V_2_reg_953;

assign tmp_7_3_fu_638_p1 = y_V_3_reg_958;

assign tmp_7_fu_626_p1 = y_V_reg_943;

assign tmp_9_fu_538_p3 = ((brmerge1_fu_452_p2[0:0] === 1'b1) ? 10'd511 : tmp_5_reg_919);

assign tmp_i10_i_fu_287_p2 = (($signed(agg_result_i_i_i_fu_277_p3) < $signed(agg_result_i_i9_i_fu_282_p3)) ? 1'b1 : 1'b0);

assign tmp_i_i8_i_fu_273_p2 = (($signed(tmp_data_2_V_1_reg_824) < $signed(tmp_data_3_V_1_reg_831)) ? 1'b1 : 1'b0);

assign tmp_i_i_fu_740_p2 = (p_Result_12_reg_1026 ^ 1'd1);

assign tmp_i_i_i_fu_269_p2 = (($signed(tmp_data_0_V_1_reg_810) < $signed(tmp_data_1_V_1_reg_817)) ? 1'b1 : 1'b0);

assign tmp_s_fu_442_p2 = (tmp_23_reg_870 ^ 1'd1);

assign underflow_1_fu_471_p2 = (tmp_24_reg_877 & tmp_1_fu_466_p2);

assign underflow_2_fu_495_p2 = (tmp_2_fu_490_p2 & tmp_26_reg_891);

assign underflow_3_fu_519_p2 = (tmp_3_fu_514_p2 & tmp_28_reg_905);

assign underflow_4_fu_745_p2 = (tmp_i_i_fu_740_p2 & p_Result_11_reg_1019);

assign underflow_fu_447_p2 = (tmp_s_fu_442_p2 & tmp_22_reg_863);

assign x_max_V_fu_293_p3 = ((tmp_i10_i_reg_858[0:0] === 1'b1) ? agg_result_i_i9_i_reg_853 : agg_result_i_i_i_reg_848);

assign y_V_1_fu_574_p3 = ((brmerge2_1_fu_485_p2[0:0] === 1'b1) ? tmp_11_fu_560_p3 : tmp_12_fu_567_p3);

assign y_V_2_fu_596_p3 = ((brmerge2_2_fu_509_p2[0:0] === 1'b1) ? tmp_14_fu_582_p3 : tmp_15_fu_589_p3);

assign y_V_3_fu_618_p3 = ((brmerge2_3_fu_533_p2[0:0] === 1'b1) ? tmp_17_fu_604_p3 : tmp_18_fu_611_p3);

assign y_V_4_fu_778_p3 = ((brmerge2_i_i_fu_759_p2[0:0] === 1'b1) ? tmp_20_fu_764_p3 : tmp_21_fu_771_p3);

assign y_V_fu_552_p3 = ((brmerge2_fu_461_p2[0:0] === 1'b1) ? tmp_9_fu_538_p3 : tmp_2_33_fu_545_p3);

endmodule //softmax_stable_array_array_ap_fixed_16_6_5_3_0_4u_softmax_config21_s
