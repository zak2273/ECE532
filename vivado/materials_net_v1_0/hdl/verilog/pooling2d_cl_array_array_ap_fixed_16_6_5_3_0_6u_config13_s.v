// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_6u_config13_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [5:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [5:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [5:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [5:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [5:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [5:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
output  [15:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [15:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [15:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [15:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [15:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [15:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;

reg ap_done;
reg ap_idle;
reg start_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] pX;
reg   [31:0] sX;
reg   [31:0] pY;
reg   [31:0] sY;
reg   [5:0] kernel_data_V_5_6;
reg   [5:0] kernel_data_V_5_7;
reg   [5:0] kernel_data_V_5_8;
reg   [5:0] kernel_data_V_5_9;
reg   [5:0] kernel_data_V_5_10;
reg   [5:0] kernel_data_V_5_11;
reg   [5:0] kernel_data_V_5_18;
reg   [5:0] kernel_data_V_5_19;
reg   [5:0] kernel_data_V_5_20;
reg   [5:0] kernel_data_V_5_21;
reg   [5:0] kernel_data_V_5_22;
reg   [5:0] kernel_data_V_5_23;
reg    line_buffer_Array_V_5_0_0_ce0;
reg    line_buffer_Array_V_5_0_0_we0;
wire   [5:0] line_buffer_Array_V_5_0_0_q0;
reg    line_buffer_Array_V_5_0_1_ce0;
reg    line_buffer_Array_V_5_0_1_we0;
wire   [5:0] line_buffer_Array_V_5_0_1_q0;
reg    line_buffer_Array_V_5_0_2_ce0;
reg    line_buffer_Array_V_5_0_2_we0;
wire   [5:0] line_buffer_Array_V_5_0_2_q0;
reg    line_buffer_Array_V_5_0_3_ce0;
reg    line_buffer_Array_V_5_0_3_we0;
wire   [5:0] line_buffer_Array_V_5_0_3_q0;
reg    line_buffer_Array_V_5_0_4_ce0;
reg    line_buffer_Array_V_5_0_4_we0;
wire   [5:0] line_buffer_Array_V_5_0_4_q0;
reg    line_buffer_Array_V_5_0_5_ce0;
reg    line_buffer_Array_V_5_0_5_we0;
wire   [5:0] line_buffer_Array_V_5_0_5_q0;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] exitcond_flatten_reg_1333;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    data_V_data_4_V_blk_n;
reg    data_V_data_5_V_blk_n;
reg    res_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] or_cond33_i_i_reg_1414;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg    res_V_data_4_V_blk_n;
reg    res_V_data_5_V_blk_n;
reg   [3:0] indvar_flatten_reg_314;
wire   [0:0] exitcond_flatten_fu_336_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    res_V_data_0_V1_status;
reg    ap_block_state6_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten_reg_1333_pp0_iter1_reg;
wire   [3:0] indvar_flatten_next_fu_342_p2;
reg   [3:0] indvar_flatten_next_reg_1337;
reg   [5:0] shift_buffer_1_0_V_reg_1342;
wire    data_V_data_0_V0_status;
reg    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
reg   [5:0] shift_buffer_1_1_V_reg_1348;
reg   [5:0] shift_buffer_1_2_V_reg_1354;
reg   [5:0] shift_buffer_1_3_V_reg_1360;
reg   [5:0] shift_buffer_1_4_V_reg_1366;
reg   [5:0] shift_buffer_1_5_V_reg_1372;
reg   [5:0] DataOut_V_45_reg_1378;
reg   [5:0] DataOut_V_46_reg_1384;
reg   [5:0] DataOut_V_47_reg_1390;
reg   [5:0] DataOut_V_48_reg_1396;
reg   [5:0] DataOut_V_49_reg_1402;
reg   [5:0] DataOut_V_reg_1408;
wire   [0:0] or_cond33_i_i_fu_592_p2;
wire   [9:0] pool_window_0_V_1_fu_598_p3;
reg   [9:0] pool_window_0_V_1_reg_1418;
wire   [9:0] pool_window_1_V_1_fu_606_p3;
reg   [9:0] pool_window_1_V_1_reg_1423;
wire   [9:0] pool_window_2_V_1_fu_613_p3;
reg   [9:0] pool_window_2_V_1_reg_1428;
wire   [9:0] pool_window_3_V_1_fu_621_p3;
reg   [9:0] pool_window_3_V_1_reg_1433;
wire   [0:0] tmp_25_fu_628_p2;
reg   [0:0] tmp_25_reg_1438;
wire   [0:0] tmp_26_fu_642_p2;
reg   [0:0] tmp_26_reg_1443;
wire   [0:0] tmp_28_fu_656_p2;
reg   [0:0] tmp_28_reg_1448;
wire   [9:0] pool_window_0_V_2_fu_662_p3;
reg   [9:0] pool_window_0_V_2_reg_1453;
wire   [9:0] pool_window_1_V_2_fu_670_p3;
reg   [9:0] pool_window_1_V_2_reg_1458;
wire   [9:0] pool_window_2_V_2_fu_677_p3;
reg   [9:0] pool_window_2_V_2_reg_1463;
wire   [9:0] pool_window_3_V_2_fu_685_p3;
reg   [9:0] pool_window_3_V_2_reg_1468;
wire   [0:0] tmp_144_1_fu_692_p2;
reg   [0:0] tmp_144_1_reg_1473;
wire   [0:0] tmp_145_1_fu_706_p2;
reg   [0:0] tmp_145_1_reg_1478;
wire   [0:0] tmp_146_1_fu_720_p2;
reg   [0:0] tmp_146_1_reg_1483;
wire   [9:0] pool_window_0_V_3_fu_726_p3;
reg   [9:0] pool_window_0_V_3_reg_1488;
wire   [9:0] pool_window_1_V_3_fu_734_p3;
reg   [9:0] pool_window_1_V_3_reg_1493;
wire   [9:0] pool_window_2_V_3_fu_741_p3;
reg   [9:0] pool_window_2_V_3_reg_1498;
wire   [9:0] pool_window_3_V_3_fu_749_p3;
reg   [9:0] pool_window_3_V_3_reg_1503;
wire   [0:0] tmp_144_2_fu_756_p2;
reg   [0:0] tmp_144_2_reg_1508;
wire   [0:0] tmp_145_2_fu_770_p2;
reg   [0:0] tmp_145_2_reg_1513;
wire   [0:0] tmp_146_2_fu_784_p2;
reg   [0:0] tmp_146_2_reg_1518;
wire   [9:0] pool_window_0_V_4_fu_790_p3;
reg   [9:0] pool_window_0_V_4_reg_1523;
wire   [9:0] pool_window_1_V_4_fu_798_p3;
reg   [9:0] pool_window_1_V_4_reg_1528;
wire   [9:0] pool_window_2_V_4_fu_805_p3;
reg   [9:0] pool_window_2_V_4_reg_1533;
wire   [9:0] pool_window_3_V_4_fu_813_p3;
reg   [9:0] pool_window_3_V_4_reg_1538;
wire   [0:0] tmp_144_3_fu_820_p2;
reg   [0:0] tmp_144_3_reg_1543;
wire   [0:0] tmp_145_3_fu_834_p2;
reg   [0:0] tmp_145_3_reg_1548;
wire   [0:0] tmp_146_3_fu_848_p2;
reg   [0:0] tmp_146_3_reg_1553;
wire   [9:0] pool_window_0_V_5_fu_854_p3;
reg   [9:0] pool_window_0_V_5_reg_1558;
wire   [9:0] pool_window_1_V_5_fu_862_p3;
reg   [9:0] pool_window_1_V_5_reg_1563;
wire   [9:0] pool_window_2_V_5_fu_869_p3;
reg   [9:0] pool_window_2_V_5_reg_1568;
wire   [9:0] pool_window_3_V_5_fu_877_p3;
reg   [9:0] pool_window_3_V_5_reg_1573;
wire   [0:0] tmp_144_4_fu_884_p2;
reg   [0:0] tmp_144_4_reg_1578;
wire   [0:0] tmp_145_4_fu_898_p2;
reg   [0:0] tmp_145_4_reg_1583;
wire   [0:0] tmp_146_4_fu_912_p2;
reg   [0:0] tmp_146_4_reg_1588;
wire   [9:0] pool_window_0_V_6_fu_918_p3;
reg   [9:0] pool_window_0_V_6_reg_1593;
wire   [9:0] pool_window_1_V_6_fu_926_p3;
reg   [9:0] pool_window_1_V_6_reg_1598;
wire   [9:0] pool_window_2_V_6_fu_933_p3;
reg   [9:0] pool_window_2_V_6_reg_1603;
wire   [9:0] pool_window_3_V_6_fu_941_p3;
reg   [9:0] pool_window_3_V_6_reg_1608;
wire   [0:0] tmp_144_5_fu_948_p2;
reg   [0:0] tmp_144_5_reg_1613;
wire   [0:0] tmp_145_5_fu_962_p2;
reg   [0:0] tmp_145_5_reg_1618;
wire   [0:0] tmp_146_5_fu_976_p2;
reg   [0:0] tmp_146_5_reg_1623;
wire   [0:0] tmp_20_fu_982_p2;
reg   [0:0] tmp_20_reg_1628;
wire   [31:0] p_in_i_i_fu_1006_p3;
reg   [31:0] p_in_i_i_reg_1632;
wire   [0:0] tmp_21_fu_1026_p2;
reg   [0:0] tmp_21_reg_1637;
wire   [31:0] p_in28_i_i_fu_1050_p3;
reg   [31:0] p_in28_i_i_reg_1641;
wire   [15:0] tmp_data_0_V_fu_1093_p6;
reg   [15:0] tmp_data_0_V_reg_1646;
wire   [15:0] tmp_data_1_V_fu_1136_p6;
reg   [15:0] tmp_data_1_V_reg_1651;
wire   [15:0] tmp_data_2_V_fu_1179_p6;
reg   [15:0] tmp_data_2_V_reg_1656;
wire   [15:0] tmp_data_3_V_fu_1222_p6;
reg   [15:0] tmp_data_3_V_reg_1661;
wire   [15:0] tmp_data_4_V_fu_1265_p6;
reg   [15:0] tmp_data_4_V_reg_1666;
wire   [15:0] tmp_data_5_V_fu_1308_p6;
reg   [15:0] tmp_data_5_V_reg_1671;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage1_subdone;
reg   [3:0] ap_phi_mux_indvar_flatten_phi_fu_318_p4;
reg   [31:0] ap_phi_mux_storemerge_i_i_phi_fu_329_p4;
reg   [31:0] ap_phi_reg_pp0_iter1_storemerge_i_i_reg_325;
wire   [31:0] ap_phi_reg_pp0_iter0_storemerge_i_i_reg_325;
reg    data_V_data_0_V0_update;
reg    res_V_data_0_V1_update;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] tmp_22_fu_988_p2;
wire   [31:0] tmp_23_fu_1032_p2;
wire   [0:0] tmp_16_fu_544_p2;
wire   [0:0] tmp_17_fu_554_p2;
wire   [0:0] tmp_18_fu_564_p2;
wire   [0:0] tmp_19_fu_574_p2;
wire   [0:0] tmp2_fu_586_p2;
wire   [0:0] tmp1_fu_580_p2;
wire   [9:0] p_phi1_fu_634_p3;
wire   [9:0] p_phi2_fu_648_p3;
wire   [9:0] p_phi3_fu_698_p3;
wire   [9:0] p_phi4_fu_712_p3;
wire   [9:0] p_phi5_fu_762_p3;
wire   [9:0] p_phi6_fu_776_p3;
wire   [9:0] p_phi7_fu_826_p3;
wire   [9:0] p_phi8_fu_840_p3;
wire   [9:0] p_phi9_fu_890_p3;
wire   [9:0] p_phi10_fu_904_p3;
wire   [9:0] p_phi11_fu_954_p3;
wire   [9:0] p_phi_fu_968_p3;
wire   [31:0] phitmp_i_i_fu_1000_p2;
wire   [31:0] phitmp39_i_i_fu_1044_p2;
wire   [1:0] tmp_27_fu_1076_p3;
wire   [1:0] tmp_29_fu_1083_p1;
wire   [15:0] tmp_data_0_V_fu_1093_p1;
wire   [15:0] tmp_data_0_V_fu_1093_p2;
wire   [15:0] tmp_data_0_V_fu_1093_p3;
wire   [15:0] tmp_data_0_V_fu_1093_p4;
wire   [1:0] tmp_data_0_V_fu_1093_p5;
wire   [1:0] tmp_31_fu_1119_p3;
wire   [1:0] tmp_32_fu_1126_p1;
wire   [15:0] tmp_data_1_V_fu_1136_p1;
wire   [15:0] tmp_data_1_V_fu_1136_p2;
wire   [15:0] tmp_data_1_V_fu_1136_p3;
wire   [15:0] tmp_data_1_V_fu_1136_p4;
wire   [1:0] tmp_data_1_V_fu_1136_p5;
wire   [1:0] tmp_34_fu_1162_p3;
wire   [1:0] tmp_35_fu_1169_p1;
wire   [15:0] tmp_data_2_V_fu_1179_p1;
wire   [15:0] tmp_data_2_V_fu_1179_p2;
wire   [15:0] tmp_data_2_V_fu_1179_p3;
wire   [15:0] tmp_data_2_V_fu_1179_p4;
wire   [1:0] tmp_data_2_V_fu_1179_p5;
wire   [1:0] tmp_37_fu_1205_p3;
wire   [1:0] tmp_38_fu_1212_p1;
wire   [15:0] tmp_data_3_V_fu_1222_p1;
wire   [15:0] tmp_data_3_V_fu_1222_p2;
wire   [15:0] tmp_data_3_V_fu_1222_p3;
wire   [15:0] tmp_data_3_V_fu_1222_p4;
wire   [1:0] tmp_data_3_V_fu_1222_p5;
wire   [1:0] tmp_40_fu_1248_p3;
wire   [1:0] tmp_41_fu_1255_p1;
wire   [15:0] tmp_data_4_V_fu_1265_p1;
wire   [15:0] tmp_data_4_V_fu_1265_p2;
wire   [15:0] tmp_data_4_V_fu_1265_p3;
wire   [15:0] tmp_data_4_V_fu_1265_p4;
wire   [1:0] tmp_data_4_V_fu_1265_p5;
wire   [1:0] tmp_43_fu_1291_p3;
wire   [1:0] tmp_44_fu_1298_p1;
wire   [15:0] tmp_data_5_V_fu_1308_p1;
wire   [15:0] tmp_data_5_V_fu_1308_p2;
wire   [15:0] tmp_data_5_V_fu_1308_p3;
wire   [15:0] tmp_data_5_V_fu_1308_p4;
wire   [1:0] tmp_data_5_V_fu_1308_p5;
wire    ap_CS_fsm_state7;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_397;
reg    ap_condition_1017;
reg    ap_condition_353;
reg    ap_condition_1022;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 pX = 32'd0;
#0 sX = 32'd0;
#0 pY = 32'd0;
#0 sY = 32'd0;
#0 kernel_data_V_5_6 = 6'd0;
#0 kernel_data_V_5_7 = 6'd0;
#0 kernel_data_V_5_8 = 6'd0;
#0 kernel_data_V_5_9 = 6'd0;
#0 kernel_data_V_5_10 = 6'd0;
#0 kernel_data_V_5_11 = 6'd0;
#0 kernel_data_V_5_18 = 6'd0;
#0 kernel_data_V_5_19 = 6'd0;
#0 kernel_data_V_5_20 = 6'd0;
#0 kernel_data_V_5_21 = 6'd0;
#0 kernel_data_V_5_22 = 6'd0;
#0 kernel_data_V_5_23 = 6'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_6u_config13_s_line_buffer_Array_Bew #(
    .DataWidth( 6 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
line_buffer_Array_V_5_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(2'd3),
    .ce0(line_buffer_Array_V_5_0_0_ce0),
    .we0(line_buffer_Array_V_5_0_0_we0),
    .d0(data_V_data_0_V_dout),
    .q0(line_buffer_Array_V_5_0_0_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_6u_config13_s_line_buffer_Array_Bew #(
    .DataWidth( 6 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
line_buffer_Array_V_5_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(2'd3),
    .ce0(line_buffer_Array_V_5_0_1_ce0),
    .we0(line_buffer_Array_V_5_0_1_we0),
    .d0(data_V_data_1_V_dout),
    .q0(line_buffer_Array_V_5_0_1_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_6u_config13_s_line_buffer_Array_Bew #(
    .DataWidth( 6 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
line_buffer_Array_V_5_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(2'd3),
    .ce0(line_buffer_Array_V_5_0_2_ce0),
    .we0(line_buffer_Array_V_5_0_2_we0),
    .d0(data_V_data_2_V_dout),
    .q0(line_buffer_Array_V_5_0_2_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_6u_config13_s_line_buffer_Array_Bew #(
    .DataWidth( 6 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
line_buffer_Array_V_5_0_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(2'd3),
    .ce0(line_buffer_Array_V_5_0_3_ce0),
    .we0(line_buffer_Array_V_5_0_3_we0),
    .d0(data_V_data_3_V_dout),
    .q0(line_buffer_Array_V_5_0_3_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_6u_config13_s_line_buffer_Array_Bew #(
    .DataWidth( 6 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
line_buffer_Array_V_5_0_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(2'd3),
    .ce0(line_buffer_Array_V_5_0_4_ce0),
    .we0(line_buffer_Array_V_5_0_4_we0),
    .d0(data_V_data_4_V_dout),
    .q0(line_buffer_Array_V_5_0_4_q0)
);

pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_6u_config13_s_line_buffer_Array_Bew #(
    .DataWidth( 6 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
line_buffer_Array_V_5_0_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(2'd3),
    .ce0(line_buffer_Array_V_5_0_5_ce0),
    .we0(line_buffer_Array_V_5_0_5_we0),
    .d0(data_V_data_5_V_dout),
    .q0(line_buffer_Array_V_5_0_5_q0)
);

materials_net_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
materials_net_mux_42_16_1_1_U301(
    .din0(tmp_data_0_V_fu_1093_p1),
    .din1(tmp_data_0_V_fu_1093_p2),
    .din2(tmp_data_0_V_fu_1093_p3),
    .din3(tmp_data_0_V_fu_1093_p4),
    .din4(tmp_data_0_V_fu_1093_p5),
    .dout(tmp_data_0_V_fu_1093_p6)
);

materials_net_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
materials_net_mux_42_16_1_1_U302(
    .din0(tmp_data_1_V_fu_1136_p1),
    .din1(tmp_data_1_V_fu_1136_p2),
    .din2(tmp_data_1_V_fu_1136_p3),
    .din3(tmp_data_1_V_fu_1136_p4),
    .din4(tmp_data_1_V_fu_1136_p5),
    .dout(tmp_data_1_V_fu_1136_p6)
);

materials_net_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
materials_net_mux_42_16_1_1_U303(
    .din0(tmp_data_2_V_fu_1179_p1),
    .din1(tmp_data_2_V_fu_1179_p2),
    .din2(tmp_data_2_V_fu_1179_p3),
    .din3(tmp_data_2_V_fu_1179_p4),
    .din4(tmp_data_2_V_fu_1179_p5),
    .dout(tmp_data_2_V_fu_1179_p6)
);

materials_net_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
materials_net_mux_42_16_1_1_U304(
    .din0(tmp_data_3_V_fu_1222_p1),
    .din1(tmp_data_3_V_fu_1222_p2),
    .din2(tmp_data_3_V_fu_1222_p3),
    .din3(tmp_data_3_V_fu_1222_p4),
    .din4(tmp_data_3_V_fu_1222_p5),
    .dout(tmp_data_3_V_fu_1222_p6)
);

materials_net_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
materials_net_mux_42_16_1_1_U305(
    .din0(tmp_data_4_V_fu_1265_p1),
    .din1(tmp_data_4_V_fu_1265_p2),
    .din2(tmp_data_4_V_fu_1265_p3),
    .din3(tmp_data_4_V_fu_1265_p4),
    .din4(tmp_data_4_V_fu_1265_p5),
    .dout(tmp_data_4_V_fu_1265_p6)
);

materials_net_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
materials_net_mux_42_16_1_1_U306(
    .din0(tmp_data_5_V_fu_1308_p1),
    .din1(tmp_data_5_V_fu_1308_p2),
    .din2(tmp_data_5_V_fu_1308_p3),
    .din3(tmp_data_5_V_fu_1308_p4),
    .din4(tmp_data_5_V_fu_1308_p5),
    .dout(tmp_data_5_V_fu_1308_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_21_fu_1026_p2 == 1'd1) & (tmp_20_fu_982_p2 == 1'd1) & (exitcond_flatten_reg_1333 == 1'd0))) begin
        ap_phi_reg_pp0_iter1_storemerge_i_i_reg_325 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_storemerge_i_i_reg_325 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_325;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_1333 == 1'd0))) begin
        indvar_flatten_reg_314 <= indvar_flatten_next_reg_1337;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_314 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_397)) begin
        if ((tmp_20_fu_982_p2 == 1'd1)) begin
            pX <= 32'd0;
        end else if ((tmp_20_fu_982_p2 == 1'd0)) begin
            pX <= tmp_22_fu_988_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1017)) begin
        if ((tmp_21_fu_1026_p2 == 1'd1)) begin
            pY <= 32'd0;
        end else if ((tmp_21_fu_1026_p2 == 1'd0)) begin
            pY <= tmp_23_fu_1032_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_1022)) begin
            sX <= p_in_i_i_reg_1632;
        end else if ((1'b1 == ap_condition_353)) begin
            sX <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_1333 == 1'd0))) begin
        DataOut_V_45_reg_1378 <= line_buffer_Array_V_5_0_0_q0;
        DataOut_V_46_reg_1384 <= line_buffer_Array_V_5_0_1_q0;
        DataOut_V_47_reg_1390 <= line_buffer_Array_V_5_0_2_q0;
        DataOut_V_48_reg_1396 <= line_buffer_Array_V_5_0_3_q0;
        DataOut_V_49_reg_1402 <= line_buffer_Array_V_5_0_4_q0;
        DataOut_V_reg_1408 <= line_buffer_Array_V_5_0_5_q0;
        shift_buffer_1_0_V_reg_1342 <= data_V_data_0_V_dout;
        shift_buffer_1_1_V_reg_1348 <= data_V_data_1_V_dout;
        shift_buffer_1_2_V_reg_1354 <= data_V_data_2_V_dout;
        shift_buffer_1_3_V_reg_1360 <= data_V_data_3_V_dout;
        shift_buffer_1_4_V_reg_1366 <= data_V_data_4_V_dout;
        shift_buffer_1_5_V_reg_1372 <= data_V_data_5_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten_reg_1333 <= exitcond_flatten_fu_336_p2;
        exitcond_flatten_reg_1333_pp0_iter1_reg <= exitcond_flatten_reg_1333;
        tmp_20_reg_1628 <= tmp_20_fu_982_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_next_reg_1337 <= indvar_flatten_next_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_1333 == 1'd0))) begin
        kernel_data_V_5_10 <= DataOut_V_49_reg_1402;
        kernel_data_V_5_11 <= DataOut_V_reg_1408;
        kernel_data_V_5_18 <= shift_buffer_1_0_V_reg_1342;
        kernel_data_V_5_19 <= shift_buffer_1_1_V_reg_1348;
        kernel_data_V_5_20 <= shift_buffer_1_2_V_reg_1354;
        kernel_data_V_5_21 <= shift_buffer_1_3_V_reg_1360;
        kernel_data_V_5_22 <= shift_buffer_1_4_V_reg_1366;
        kernel_data_V_5_23 <= shift_buffer_1_5_V_reg_1372;
        kernel_data_V_5_6 <= DataOut_V_45_reg_1378;
        kernel_data_V_5_7 <= DataOut_V_46_reg_1384;
        kernel_data_V_5_8 <= DataOut_V_47_reg_1390;
        kernel_data_V_5_9 <= DataOut_V_48_reg_1396;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_1333 == 1'd0))) begin
        or_cond33_i_i_reg_1414 <= or_cond33_i_i_fu_592_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_20_fu_982_p2 == 1'd1) & (tmp_21_fu_1026_p2 == 1'd0) & (exitcond_flatten_reg_1333 == 1'd0))) begin
        p_in28_i_i_reg_1641 <= p_in28_i_i_fu_1050_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_20_fu_982_p2 == 1'd0))) begin
        p_in_i_i_reg_1632 <= p_in_i_i_fu_1006_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_cond33_i_i_fu_592_p2 == 1'd1))) begin
        pool_window_0_V_1_reg_1418[9 : 4] <= pool_window_0_V_1_fu_598_p3[9 : 4];
        pool_window_0_V_2_reg_1453[9 : 4] <= pool_window_0_V_2_fu_662_p3[9 : 4];
        pool_window_0_V_3_reg_1488[9 : 4] <= pool_window_0_V_3_fu_726_p3[9 : 4];
        pool_window_0_V_4_reg_1523[9 : 4] <= pool_window_0_V_4_fu_790_p3[9 : 4];
        pool_window_0_V_5_reg_1558[9 : 4] <= pool_window_0_V_5_fu_854_p3[9 : 4];
        pool_window_0_V_6_reg_1593[9 : 4] <= pool_window_0_V_6_fu_918_p3[9 : 4];
        pool_window_1_V_1_reg_1423[9 : 4] <= pool_window_1_V_1_fu_606_p3[9 : 4];
        pool_window_1_V_2_reg_1458[9 : 4] <= pool_window_1_V_2_fu_670_p3[9 : 4];
        pool_window_1_V_3_reg_1493[9 : 4] <= pool_window_1_V_3_fu_734_p3[9 : 4];
        pool_window_1_V_4_reg_1528[9 : 4] <= pool_window_1_V_4_fu_798_p3[9 : 4];
        pool_window_1_V_5_reg_1563[9 : 4] <= pool_window_1_V_5_fu_862_p3[9 : 4];
        pool_window_1_V_6_reg_1598[9 : 4] <= pool_window_1_V_6_fu_926_p3[9 : 4];
        pool_window_2_V_1_reg_1428[9 : 4] <= pool_window_2_V_1_fu_613_p3[9 : 4];
        pool_window_2_V_2_reg_1463[9 : 4] <= pool_window_2_V_2_fu_677_p3[9 : 4];
        pool_window_2_V_3_reg_1498[9 : 4] <= pool_window_2_V_3_fu_741_p3[9 : 4];
        pool_window_2_V_4_reg_1533[9 : 4] <= pool_window_2_V_4_fu_805_p3[9 : 4];
        pool_window_2_V_5_reg_1568[9 : 4] <= pool_window_2_V_5_fu_869_p3[9 : 4];
        pool_window_2_V_6_reg_1603[9 : 4] <= pool_window_2_V_6_fu_933_p3[9 : 4];
        pool_window_3_V_1_reg_1433[9 : 4] <= pool_window_3_V_1_fu_621_p3[9 : 4];
        pool_window_3_V_2_reg_1468[9 : 4] <= pool_window_3_V_2_fu_685_p3[9 : 4];
        pool_window_3_V_3_reg_1503[9 : 4] <= pool_window_3_V_3_fu_749_p3[9 : 4];
        pool_window_3_V_4_reg_1538[9 : 4] <= pool_window_3_V_4_fu_813_p3[9 : 4];
        pool_window_3_V_5_reg_1573[9 : 4] <= pool_window_3_V_5_fu_877_p3[9 : 4];
        pool_window_3_V_6_reg_1608[9 : 4] <= pool_window_3_V_6_fu_941_p3[9 : 4];
        tmp_144_1_reg_1473 <= tmp_144_1_fu_692_p2;
        tmp_144_2_reg_1508 <= tmp_144_2_fu_756_p2;
        tmp_144_3_reg_1543 <= tmp_144_3_fu_820_p2;
        tmp_144_4_reg_1578 <= tmp_144_4_fu_884_p2;
        tmp_144_5_reg_1613 <= tmp_144_5_fu_948_p2;
        tmp_145_1_reg_1478 <= tmp_145_1_fu_706_p2;
        tmp_145_2_reg_1513 <= tmp_145_2_fu_770_p2;
        tmp_145_3_reg_1548 <= tmp_145_3_fu_834_p2;
        tmp_145_4_reg_1583 <= tmp_145_4_fu_898_p2;
        tmp_145_5_reg_1618 <= tmp_145_5_fu_962_p2;
        tmp_146_1_reg_1483 <= tmp_146_1_fu_720_p2;
        tmp_146_2_reg_1518 <= tmp_146_2_fu_784_p2;
        tmp_146_3_reg_1553 <= tmp_146_3_fu_848_p2;
        tmp_146_4_reg_1588 <= tmp_146_4_fu_912_p2;
        tmp_146_5_reg_1623 <= tmp_146_5_fu_976_p2;
        tmp_25_reg_1438 <= tmp_25_fu_628_p2;
        tmp_26_reg_1443 <= tmp_26_fu_642_p2;
        tmp_28_reg_1448 <= tmp_28_fu_656_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_20_reg_1628 == 1'd1))) begin
        sY <= ap_phi_mux_storemerge_i_i_phi_fu_329_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_20_fu_982_p2 == 1'd1))) begin
        tmp_21_reg_1637 <= tmp_21_fu_1026_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (or_cond33_i_i_reg_1414 == 1'd1))) begin
        tmp_data_0_V_reg_1646 <= tmp_data_0_V_fu_1093_p6;
        tmp_data_1_V_reg_1651 <= tmp_data_1_V_fu_1136_p6;
        tmp_data_2_V_reg_1656 <= tmp_data_2_V_fu_1179_p6;
        tmp_data_3_V_reg_1661 <= tmp_data_3_V_fu_1222_p6;
        tmp_data_4_V_reg_1666 <= tmp_data_4_V_fu_1265_p6;
        tmp_data_5_V_reg_1671 <= tmp_data_5_V_fu_1308_p6;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_336_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_1333 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_318_p4 = indvar_flatten_next_reg_1337;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_318_p4 = indvar_flatten_reg_314;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_20_reg_1628 == 1'd1) & (tmp_21_reg_1637 == 1'd0) & (exitcond_flatten_reg_1333_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        ap_phi_mux_storemerge_i_i_phi_fu_329_p4 = p_in28_i_i_reg_1641;
    end else begin
        ap_phi_mux_storemerge_i_i_phi_fu_329_p4 = ap_phi_reg_pp0_iter1_storemerge_i_i_reg_325;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_1333 == 1'd0))) begin
        data_V_data_0_V0_update = 1'b1;
    end else begin
        data_V_data_0_V0_update = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_1333 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_1333 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_1333 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_1333 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_1333 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_1333 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_1333 == 1'd0))) begin
        line_buffer_Array_V_5_0_0_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_5_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_1333 == 1'd0))) begin
        line_buffer_Array_V_5_0_0_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_5_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_1333 == 1'd0))) begin
        line_buffer_Array_V_5_0_1_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_5_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_1333 == 1'd0))) begin
        line_buffer_Array_V_5_0_1_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_5_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_1333 == 1'd0))) begin
        line_buffer_Array_V_5_0_2_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_5_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_1333 == 1'd0))) begin
        line_buffer_Array_V_5_0_2_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_5_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_1333 == 1'd0))) begin
        line_buffer_Array_V_5_0_3_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_5_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_1333 == 1'd0))) begin
        line_buffer_Array_V_5_0_3_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_5_0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_1333 == 1'd0))) begin
        line_buffer_Array_V_5_0_4_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_5_0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_1333 == 1'd0))) begin
        line_buffer_Array_V_5_0_4_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_5_0_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_1333 == 1'd0))) begin
        line_buffer_Array_V_5_0_5_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_5_0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_1333 == 1'd0))) begin
        line_buffer_Array_V_5_0_5_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_5_0_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_cond33_i_i_reg_1414 == 1'd1))) begin
        res_V_data_0_V1_update = 1'b1;
    end else begin
        res_V_data_0_V1_update = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_cond33_i_i_reg_1414 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_cond33_i_i_reg_1414 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_cond33_i_i_reg_1414 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_cond33_i_i_reg_1414 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_cond33_i_i_reg_1414 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_cond33_i_i_reg_1414 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_fu_336_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_fu_336_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((res_V_data_0_V1_status == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (or_cond33_i_i_reg_1414 == 1'd1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((res_V_data_0_V1_status == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (or_cond33_i_i_reg_1414 == 1'd1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((res_V_data_0_V1_status == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (or_cond33_i_i_reg_1414 == 1'd1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((data_V_data_0_V0_status == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_reg_1333 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((data_V_data_0_V0_status == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_reg_1333 == 1'd0));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((data_V_data_0_V0_status == 1'b0) & (exitcond_flatten_reg_1333 == 1'd0));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter2 = ((res_V_data_0_V1_status == 1'b0) & (or_cond33_i_i_reg_1414 == 1'd1));
end

always @ (*) begin
    ap_condition_1017 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_20_fu_982_p2 == 1'd1) & (exitcond_flatten_reg_1333 == 1'd0));
end

always @ (*) begin
    ap_condition_1022 = ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_20_reg_1628 == 1'd0));
end

always @ (*) begin
    ap_condition_353 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_20_fu_982_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_397 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_storemerge_i_i_reg_325 = 'bx;

assign ap_ready = internal_ap_ready;

assign data_V_data_0_V0_status = (data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign data_V_data_0_V_read = data_V_data_0_V0_update;

assign data_V_data_1_V_read = data_V_data_0_V0_update;

assign data_V_data_2_V_read = data_V_data_0_V0_update;

assign data_V_data_3_V_read = data_V_data_0_V0_update;

assign data_V_data_4_V_read = data_V_data_0_V0_update;

assign data_V_data_5_V_read = data_V_data_0_V0_update;

assign exitcond_flatten_fu_336_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_318_p4 == 4'd12) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_342_p2 = (ap_phi_mux_indvar_flatten_phi_fu_318_p4 + 4'd1);

assign or_cond33_i_i_fu_592_p2 = (tmp2_fu_586_p2 & tmp1_fu_580_p2);

assign p_in28_i_i_fu_1050_p3 = ((tmp_17_fu_554_p2[0:0] === 1'b1) ? 32'd0 : phitmp39_i_i_fu_1044_p2);

assign p_in_i_i_fu_1006_p3 = ((tmp_16_fu_544_p2[0:0] === 1'b1) ? 32'd0 : phitmp_i_i_fu_1000_p2);

assign p_phi10_fu_904_p3 = ((tmp_145_4_fu_898_p2[0:0] === 1'b1) ? pool_window_3_V_5_fu_877_p3 : pool_window_2_V_5_fu_869_p3);

assign p_phi11_fu_954_p3 = ((tmp_144_5_fu_948_p2[0:0] === 1'b1) ? pool_window_1_V_6_fu_926_p3 : pool_window_0_V_6_fu_918_p3);

assign p_phi1_fu_634_p3 = ((tmp_25_fu_628_p2[0:0] === 1'b1) ? pool_window_1_V_1_fu_606_p3 : pool_window_0_V_1_fu_598_p3);

assign p_phi2_fu_648_p3 = ((tmp_26_fu_642_p2[0:0] === 1'b1) ? pool_window_3_V_1_fu_621_p3 : pool_window_2_V_1_fu_613_p3);

assign p_phi3_fu_698_p3 = ((tmp_144_1_fu_692_p2[0:0] === 1'b1) ? pool_window_1_V_2_fu_670_p3 : pool_window_0_V_2_fu_662_p3);

assign p_phi4_fu_712_p3 = ((tmp_145_1_fu_706_p2[0:0] === 1'b1) ? pool_window_3_V_2_fu_685_p3 : pool_window_2_V_2_fu_677_p3);

assign p_phi5_fu_762_p3 = ((tmp_144_2_fu_756_p2[0:0] === 1'b1) ? pool_window_1_V_3_fu_734_p3 : pool_window_0_V_3_fu_726_p3);

assign p_phi6_fu_776_p3 = ((tmp_145_2_fu_770_p2[0:0] === 1'b1) ? pool_window_3_V_3_fu_749_p3 : pool_window_2_V_3_fu_741_p3);

assign p_phi7_fu_826_p3 = ((tmp_144_3_fu_820_p2[0:0] === 1'b1) ? pool_window_1_V_4_fu_798_p3 : pool_window_0_V_4_fu_790_p3);

assign p_phi8_fu_840_p3 = ((tmp_145_3_fu_834_p2[0:0] === 1'b1) ? pool_window_3_V_4_fu_813_p3 : pool_window_2_V_4_fu_805_p3);

assign p_phi9_fu_890_p3 = ((tmp_144_4_fu_884_p2[0:0] === 1'b1) ? pool_window_1_V_5_fu_862_p3 : pool_window_0_V_5_fu_854_p3);

assign p_phi_fu_968_p3 = ((tmp_145_5_fu_962_p2[0:0] === 1'b1) ? pool_window_3_V_6_fu_941_p3 : pool_window_2_V_6_fu_933_p3);

assign phitmp39_i_i_fu_1044_p2 = (sY + 32'd1);

assign phitmp_i_i_fu_1000_p2 = (sX + 32'd1);

assign pool_window_0_V_1_fu_598_p3 = {{kernel_data_V_5_6}, {4'd0}};

assign pool_window_0_V_2_fu_662_p3 = {{kernel_data_V_5_7}, {4'd0}};

assign pool_window_0_V_3_fu_726_p3 = {{kernel_data_V_5_8}, {4'd0}};

assign pool_window_0_V_4_fu_790_p3 = {{kernel_data_V_5_9}, {4'd0}};

assign pool_window_0_V_5_fu_854_p3 = {{kernel_data_V_5_10}, {4'd0}};

assign pool_window_0_V_6_fu_918_p3 = {{kernel_data_V_5_11}, {4'd0}};

assign pool_window_1_V_1_fu_606_p3 = {{DataOut_V_45_reg_1378}, {4'd0}};

assign pool_window_1_V_2_fu_670_p3 = {{DataOut_V_46_reg_1384}, {4'd0}};

assign pool_window_1_V_3_fu_734_p3 = {{DataOut_V_47_reg_1390}, {4'd0}};

assign pool_window_1_V_4_fu_798_p3 = {{DataOut_V_48_reg_1396}, {4'd0}};

assign pool_window_1_V_5_fu_862_p3 = {{DataOut_V_49_reg_1402}, {4'd0}};

assign pool_window_1_V_6_fu_926_p3 = {{DataOut_V_reg_1408}, {4'd0}};

assign pool_window_2_V_1_fu_613_p3 = {{kernel_data_V_5_18}, {4'd0}};

assign pool_window_2_V_2_fu_677_p3 = {{kernel_data_V_5_19}, {4'd0}};

assign pool_window_2_V_3_fu_741_p3 = {{kernel_data_V_5_20}, {4'd0}};

assign pool_window_2_V_4_fu_805_p3 = {{kernel_data_V_5_21}, {4'd0}};

assign pool_window_2_V_5_fu_869_p3 = {{kernel_data_V_5_22}, {4'd0}};

assign pool_window_2_V_6_fu_933_p3 = {{kernel_data_V_5_23}, {4'd0}};

assign pool_window_3_V_1_fu_621_p3 = {{shift_buffer_1_0_V_reg_1342}, {4'd0}};

assign pool_window_3_V_2_fu_685_p3 = {{shift_buffer_1_1_V_reg_1348}, {4'd0}};

assign pool_window_3_V_3_fu_749_p3 = {{shift_buffer_1_2_V_reg_1354}, {4'd0}};

assign pool_window_3_V_4_fu_813_p3 = {{shift_buffer_1_3_V_reg_1360}, {4'd0}};

assign pool_window_3_V_5_fu_877_p3 = {{shift_buffer_1_4_V_reg_1366}, {4'd0}};

assign pool_window_3_V_6_fu_941_p3 = {{shift_buffer_1_5_V_reg_1372}, {4'd0}};

assign res_V_data_0_V1_status = (res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign res_V_data_0_V_din = tmp_data_0_V_reg_1646;

assign res_V_data_0_V_write = res_V_data_0_V1_update;

assign res_V_data_1_V_din = tmp_data_1_V_reg_1651;

assign res_V_data_1_V_write = res_V_data_0_V1_update;

assign res_V_data_2_V_din = tmp_data_2_V_reg_1656;

assign res_V_data_2_V_write = res_V_data_0_V1_update;

assign res_V_data_3_V_din = tmp_data_3_V_reg_1661;

assign res_V_data_3_V_write = res_V_data_0_V1_update;

assign res_V_data_4_V_din = tmp_data_4_V_reg_1666;

assign res_V_data_4_V_write = res_V_data_0_V1_update;

assign res_V_data_5_V_din = tmp_data_5_V_reg_1671;

assign res_V_data_5_V_write = res_V_data_0_V1_update;

assign start_out = real_start;

assign tmp1_fu_580_p2 = (tmp_17_fu_554_p2 & tmp_16_fu_544_p2);

assign tmp2_fu_586_p2 = (tmp_19_fu_574_p2 & tmp_18_fu_564_p2);

assign tmp_144_1_fu_692_p2 = ((pool_window_0_V_2_fu_662_p3 < pool_window_1_V_2_fu_670_p3) ? 1'b1 : 1'b0);

assign tmp_144_2_fu_756_p2 = ((pool_window_0_V_3_fu_726_p3 < pool_window_1_V_3_fu_734_p3) ? 1'b1 : 1'b0);

assign tmp_144_3_fu_820_p2 = ((pool_window_0_V_4_fu_790_p3 < pool_window_1_V_4_fu_798_p3) ? 1'b1 : 1'b0);

assign tmp_144_4_fu_884_p2 = ((pool_window_0_V_5_fu_854_p3 < pool_window_1_V_5_fu_862_p3) ? 1'b1 : 1'b0);

assign tmp_144_5_fu_948_p2 = ((pool_window_0_V_6_fu_918_p3 < pool_window_1_V_6_fu_926_p3) ? 1'b1 : 1'b0);

assign tmp_145_1_fu_706_p2 = ((pool_window_2_V_2_fu_677_p3 < pool_window_3_V_2_fu_685_p3) ? 1'b1 : 1'b0);

assign tmp_145_2_fu_770_p2 = ((pool_window_2_V_3_fu_741_p3 < pool_window_3_V_3_fu_749_p3) ? 1'b1 : 1'b0);

assign tmp_145_3_fu_834_p2 = ((pool_window_2_V_4_fu_805_p3 < pool_window_3_V_4_fu_813_p3) ? 1'b1 : 1'b0);

assign tmp_145_4_fu_898_p2 = ((pool_window_2_V_5_fu_869_p3 < pool_window_3_V_5_fu_877_p3) ? 1'b1 : 1'b0);

assign tmp_145_5_fu_962_p2 = ((pool_window_2_V_6_fu_933_p3 < pool_window_3_V_6_fu_941_p3) ? 1'b1 : 1'b0);

assign tmp_146_1_fu_720_p2 = ((p_phi3_fu_698_p3 < p_phi4_fu_712_p3) ? 1'b1 : 1'b0);

assign tmp_146_2_fu_784_p2 = ((p_phi5_fu_762_p3 < p_phi6_fu_776_p3) ? 1'b1 : 1'b0);

assign tmp_146_3_fu_848_p2 = ((p_phi7_fu_826_p3 < p_phi8_fu_840_p3) ? 1'b1 : 1'b0);

assign tmp_146_4_fu_912_p2 = ((p_phi9_fu_890_p3 < p_phi10_fu_904_p3) ? 1'b1 : 1'b0);

assign tmp_146_5_fu_976_p2 = ((p_phi11_fu_954_p3 < p_phi_fu_968_p3) ? 1'b1 : 1'b0);

assign tmp_16_fu_544_p2 = ((sX == 32'd1) ? 1'b1 : 1'b0);

assign tmp_17_fu_554_p2 = ((sY == 32'd1) ? 1'b1 : 1'b0);

assign tmp_18_fu_564_p2 = (($signed(pY) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign tmp_19_fu_574_p2 = (($signed(pX) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign tmp_20_fu_982_p2 = ((pX == 32'd3) ? 1'b1 : 1'b0);

assign tmp_21_fu_1026_p2 = ((pY == 32'd2) ? 1'b1 : 1'b0);

assign tmp_22_fu_988_p2 = (pX + 32'd1);

assign tmp_23_fu_1032_p2 = (pY + 32'd1);

assign tmp_25_fu_628_p2 = ((pool_window_0_V_1_fu_598_p3 < pool_window_1_V_1_fu_606_p3) ? 1'b1 : 1'b0);

assign tmp_26_fu_642_p2 = ((pool_window_2_V_1_fu_613_p3 < pool_window_3_V_1_fu_621_p3) ? 1'b1 : 1'b0);

assign tmp_27_fu_1076_p3 = ((tmp_26_reg_1443[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign tmp_28_fu_656_p2 = ((p_phi1_fu_634_p3 < p_phi2_fu_648_p3) ? 1'b1 : 1'b0);

assign tmp_29_fu_1083_p1 = tmp_25_reg_1438;

assign tmp_31_fu_1119_p3 = ((tmp_145_1_reg_1478[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign tmp_32_fu_1126_p1 = tmp_144_1_reg_1473;

assign tmp_34_fu_1162_p3 = ((tmp_145_2_reg_1513[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign tmp_35_fu_1169_p1 = tmp_144_2_reg_1508;

assign tmp_37_fu_1205_p3 = ((tmp_145_3_reg_1548[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign tmp_38_fu_1212_p1 = tmp_144_3_reg_1543;

assign tmp_40_fu_1248_p3 = ((tmp_145_4_reg_1583[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign tmp_41_fu_1255_p1 = tmp_144_4_reg_1578;

assign tmp_43_fu_1291_p3 = ((tmp_145_5_reg_1618[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign tmp_44_fu_1298_p1 = tmp_144_5_reg_1613;

assign tmp_data_0_V_fu_1093_p1 = pool_window_0_V_1_reg_1418;

assign tmp_data_0_V_fu_1093_p2 = pool_window_1_V_1_reg_1423;

assign tmp_data_0_V_fu_1093_p3 = pool_window_2_V_1_reg_1428;

assign tmp_data_0_V_fu_1093_p4 = pool_window_3_V_1_reg_1433;

assign tmp_data_0_V_fu_1093_p5 = ((tmp_28_reg_1448[0:0] === 1'b1) ? tmp_27_fu_1076_p3 : tmp_29_fu_1083_p1);

assign tmp_data_1_V_fu_1136_p1 = pool_window_0_V_2_reg_1453;

assign tmp_data_1_V_fu_1136_p2 = pool_window_1_V_2_reg_1458;

assign tmp_data_1_V_fu_1136_p3 = pool_window_2_V_2_reg_1463;

assign tmp_data_1_V_fu_1136_p4 = pool_window_3_V_2_reg_1468;

assign tmp_data_1_V_fu_1136_p5 = ((tmp_146_1_reg_1483[0:0] === 1'b1) ? tmp_31_fu_1119_p3 : tmp_32_fu_1126_p1);

assign tmp_data_2_V_fu_1179_p1 = pool_window_0_V_3_reg_1488;

assign tmp_data_2_V_fu_1179_p2 = pool_window_1_V_3_reg_1493;

assign tmp_data_2_V_fu_1179_p3 = pool_window_2_V_3_reg_1498;

assign tmp_data_2_V_fu_1179_p4 = pool_window_3_V_3_reg_1503;

assign tmp_data_2_V_fu_1179_p5 = ((tmp_146_2_reg_1518[0:0] === 1'b1) ? tmp_34_fu_1162_p3 : tmp_35_fu_1169_p1);

assign tmp_data_3_V_fu_1222_p1 = pool_window_0_V_4_reg_1523;

assign tmp_data_3_V_fu_1222_p2 = pool_window_1_V_4_reg_1528;

assign tmp_data_3_V_fu_1222_p3 = pool_window_2_V_4_reg_1533;

assign tmp_data_3_V_fu_1222_p4 = pool_window_3_V_4_reg_1538;

assign tmp_data_3_V_fu_1222_p5 = ((tmp_146_3_reg_1553[0:0] === 1'b1) ? tmp_37_fu_1205_p3 : tmp_38_fu_1212_p1);

assign tmp_data_4_V_fu_1265_p1 = pool_window_0_V_5_reg_1558;

assign tmp_data_4_V_fu_1265_p2 = pool_window_1_V_5_reg_1563;

assign tmp_data_4_V_fu_1265_p3 = pool_window_2_V_5_reg_1568;

assign tmp_data_4_V_fu_1265_p4 = pool_window_3_V_5_reg_1573;

assign tmp_data_4_V_fu_1265_p5 = ((tmp_146_4_reg_1588[0:0] === 1'b1) ? tmp_40_fu_1248_p3 : tmp_41_fu_1255_p1);

assign tmp_data_5_V_fu_1308_p1 = pool_window_0_V_6_reg_1593;

assign tmp_data_5_V_fu_1308_p2 = pool_window_1_V_6_reg_1598;

assign tmp_data_5_V_fu_1308_p3 = pool_window_2_V_6_reg_1603;

assign tmp_data_5_V_fu_1308_p4 = pool_window_3_V_6_reg_1608;

assign tmp_data_5_V_fu_1308_p5 = ((tmp_146_5_reg_1623[0:0] === 1'b1) ? tmp_43_fu_1291_p3 : tmp_44_fu_1298_p1);

always @ (posedge ap_clk) begin
    pool_window_0_V_1_reg_1418[3:0] <= 4'b0000;
    pool_window_1_V_1_reg_1423[3:0] <= 4'b0000;
    pool_window_2_V_1_reg_1428[3:0] <= 4'b0000;
    pool_window_3_V_1_reg_1433[3:0] <= 4'b0000;
    pool_window_0_V_2_reg_1453[3:0] <= 4'b0000;
    pool_window_1_V_2_reg_1458[3:0] <= 4'b0000;
    pool_window_2_V_2_reg_1463[3:0] <= 4'b0000;
    pool_window_3_V_2_reg_1468[3:0] <= 4'b0000;
    pool_window_0_V_3_reg_1488[3:0] <= 4'b0000;
    pool_window_1_V_3_reg_1493[3:0] <= 4'b0000;
    pool_window_2_V_3_reg_1498[3:0] <= 4'b0000;
    pool_window_3_V_3_reg_1503[3:0] <= 4'b0000;
    pool_window_0_V_4_reg_1523[3:0] <= 4'b0000;
    pool_window_1_V_4_reg_1528[3:0] <= 4'b0000;
    pool_window_2_V_4_reg_1533[3:0] <= 4'b0000;
    pool_window_3_V_4_reg_1538[3:0] <= 4'b0000;
    pool_window_0_V_5_reg_1558[3:0] <= 4'b0000;
    pool_window_1_V_5_reg_1563[3:0] <= 4'b0000;
    pool_window_2_V_5_reg_1568[3:0] <= 4'b0000;
    pool_window_3_V_5_reg_1573[3:0] <= 4'b0000;
    pool_window_0_V_6_reg_1593[3:0] <= 4'b0000;
    pool_window_1_V_6_reg_1598[3:0] <= 4'b0000;
    pool_window_2_V_6_reg_1603[3:0] <= 4'b0000;
    pool_window_3_V_6_reg_1608[3:0] <= 4'b0000;
end

endmodule //pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_6u_config13_s
