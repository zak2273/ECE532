// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [5:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [5:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [5:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [5:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
output  [15:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [15:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [15:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [15:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;

reg ap_done;
reg ap_idle;
reg start_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] pX_1;
reg   [31:0] sX_1;
reg   [31:0] pY_1;
reg   [31:0] sY_1;
reg   [5:0] kernel_data_V_4_4;
reg   [5:0] kernel_data_V_4_5;
reg   [5:0] kernel_data_V_4_6;
reg   [5:0] kernel_data_V_4_7;
reg   [5:0] kernel_data_V_4_12;
reg   [5:0] kernel_data_V_4_13;
reg   [5:0] kernel_data_V_4_14;
reg   [5:0] kernel_data_V_4_15;
reg    line_buffer_Array_V_4_0_0_ce0;
reg    line_buffer_Array_V_4_0_0_we0;
wire   [5:0] line_buffer_Array_V_4_0_0_q0;
reg    line_buffer_Array_V_4_0_1_ce0;
reg    line_buffer_Array_V_4_0_1_we0;
wire   [5:0] line_buffer_Array_V_4_0_1_q0;
reg    line_buffer_Array_V_4_0_2_ce0;
reg    line_buffer_Array_V_4_0_2_we0;
wire   [5:0] line_buffer_Array_V_4_0_2_q0;
reg    line_buffer_Array_V_4_0_3_ce0;
reg    line_buffer_Array_V_4_0_3_we0;
wire   [5:0] line_buffer_Array_V_4_0_3_q0;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] exitcond_flatten_reg_977;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    res_V_data_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] or_cond33_i_i_reg_1034;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg   [8:0] indvar_flatten_reg_236;
wire   [0:0] exitcond_flatten_fu_258_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    res_V_data_0_V1_status;
reg    ap_block_state6_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten_reg_977_pp0_iter1_reg;
wire   [8:0] indvar_flatten_next_fu_264_p2;
reg   [8:0] indvar_flatten_next_reg_981;
reg   [5:0] tmp_data_0_V_4_reg_986;
wire    data_V_data_0_V0_status;
reg    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
reg   [5:0] tmp_data_1_V_4_reg_992;
reg   [5:0] tmp_data_2_V_4_reg_998;
reg   [5:0] tmp_data_3_V_4_reg_1004;
reg   [5:0] DataOut_V_31_reg_1010;
reg   [5:0] DataOut_V_32_reg_1016;
reg   [5:0] DataOut_V_33_reg_1022;
reg   [5:0] DataOut_V_reg_1028;
wire   [0:0] or_cond33_i_i_fu_450_p2;
wire   [9:0] pool_window_0_V_1_fu_456_p3;
reg   [9:0] pool_window_0_V_1_reg_1038;
wire   [9:0] pool_window_1_V_1_fu_464_p3;
reg   [9:0] pool_window_1_V_1_reg_1043;
wire   [9:0] pool_window_2_V_1_fu_471_p3;
reg   [9:0] pool_window_2_V_1_reg_1048;
wire   [9:0] pool_window_3_V_1_fu_479_p3;
reg   [9:0] pool_window_3_V_1_reg_1053;
wire   [0:0] tmp_38_fu_486_p2;
reg   [0:0] tmp_38_reg_1058;
wire   [0:0] tmp_39_fu_500_p2;
reg   [0:0] tmp_39_reg_1063;
wire   [0:0] tmp_41_fu_514_p2;
reg   [0:0] tmp_41_reg_1068;
wire   [9:0] pool_window_0_V_2_fu_520_p3;
reg   [9:0] pool_window_0_V_2_reg_1073;
wire   [9:0] pool_window_1_V_2_fu_528_p3;
reg   [9:0] pool_window_1_V_2_reg_1078;
wire   [9:0] pool_window_2_V_2_fu_535_p3;
reg   [9:0] pool_window_2_V_2_reg_1083;
wire   [9:0] pool_window_3_V_2_fu_543_p3;
reg   [9:0] pool_window_3_V_2_reg_1088;
wire   [0:0] tmp_191_1_fu_550_p2;
reg   [0:0] tmp_191_1_reg_1093;
wire   [0:0] tmp_192_1_fu_564_p2;
reg   [0:0] tmp_192_1_reg_1098;
wire   [0:0] tmp_193_1_fu_578_p2;
reg   [0:0] tmp_193_1_reg_1103;
wire   [9:0] pool_window_0_V_4_fu_584_p3;
reg   [9:0] pool_window_0_V_4_reg_1108;
wire   [9:0] pool_window_1_V_4_fu_592_p3;
reg   [9:0] pool_window_1_V_4_reg_1113;
wire   [9:0] pool_window_2_V_4_fu_599_p3;
reg   [9:0] pool_window_2_V_4_reg_1118;
wire   [9:0] pool_window_3_V_4_fu_607_p3;
reg   [9:0] pool_window_3_V_4_reg_1123;
wire   [0:0] tmp_191_2_fu_614_p2;
reg   [0:0] tmp_191_2_reg_1128;
wire   [0:0] tmp_192_2_fu_628_p2;
reg   [0:0] tmp_192_2_reg_1133;
wire   [0:0] tmp_193_2_fu_642_p2;
reg   [0:0] tmp_193_2_reg_1138;
wire   [9:0] pool_window_0_V_7_fu_648_p3;
reg   [9:0] pool_window_0_V_7_reg_1143;
wire   [9:0] pool_window_1_V_7_fu_656_p3;
reg   [9:0] pool_window_1_V_7_reg_1148;
wire   [9:0] pool_window_2_V_7_fu_663_p3;
reg   [9:0] pool_window_2_V_7_reg_1153;
wire   [9:0] pool_window_3_V_7_fu_671_p3;
reg   [9:0] pool_window_3_V_7_reg_1158;
wire   [0:0] tmp_191_3_fu_678_p2;
reg   [0:0] tmp_191_3_reg_1163;
wire   [0:0] tmp_192_3_fu_692_p2;
reg   [0:0] tmp_192_3_reg_1168;
wire   [0:0] tmp_193_3_fu_706_p2;
reg   [0:0] tmp_193_3_reg_1173;
wire   [0:0] tmp_29_fu_712_p2;
reg   [0:0] tmp_29_reg_1178;
wire   [31:0] p_in_i_i_fu_736_p3;
reg   [31:0] p_in_i_i_reg_1182;
wire   [0:0] tmp_30_fu_756_p2;
reg   [0:0] tmp_30_reg_1187;
wire   [31:0] p_in28_i_i_fu_780_p3;
reg   [31:0] p_in28_i_i_reg_1191;
wire   [15:0] tmp_data_0_V_fu_823_p6;
reg   [15:0] tmp_data_0_V_reg_1196;
wire   [15:0] tmp_data_1_V_fu_866_p6;
reg   [15:0] tmp_data_1_V_reg_1201;
wire   [15:0] tmp_data_2_V_fu_909_p6;
reg   [15:0] tmp_data_2_V_reg_1206;
wire   [15:0] tmp_data_3_V_fu_952_p6;
reg   [15:0] tmp_data_3_V_reg_1211;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage1_subdone;
reg   [8:0] ap_phi_mux_indvar_flatten_phi_fu_240_p4;
reg   [31:0] ap_phi_mux_storemerge_i_i_phi_fu_251_p4;
reg   [31:0] ap_phi_reg_pp0_iter1_storemerge_i_i_reg_247;
wire   [31:0] ap_phi_reg_pp0_iter0_storemerge_i_i_reg_247;
reg    data_V_data_0_V0_update;
reg    res_V_data_0_V1_update;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] tmp_31_fu_718_p2;
wire   [31:0] tmp_32_fu_762_p2;
wire   [0:0] tmp_25_fu_402_p2;
wire   [0:0] tmp_26_fu_412_p2;
wire   [0:0] tmp_27_fu_422_p2;
wire   [0:0] tmp_28_fu_432_p2;
wire   [0:0] tmp2_fu_444_p2;
wire   [0:0] tmp1_fu_438_p2;
wire   [9:0] p_phi1_fu_492_p3;
wire   [9:0] p_phi2_fu_506_p3;
wire   [9:0] p_phi3_fu_556_p3;
wire   [9:0] p_phi4_fu_570_p3;
wire   [9:0] p_phi5_fu_620_p3;
wire   [9:0] p_phi6_fu_634_p3;
wire   [9:0] p_phi7_fu_684_p3;
wire   [9:0] p_phi_fu_698_p3;
wire   [31:0] phitmp_i_i_fu_730_p2;
wire   [31:0] phitmp39_i_i_fu_774_p2;
wire   [1:0] tmp_40_fu_806_p3;
wire   [1:0] tmp_42_fu_813_p1;
wire   [15:0] tmp_data_0_V_fu_823_p1;
wire   [15:0] tmp_data_0_V_fu_823_p2;
wire   [15:0] tmp_data_0_V_fu_823_p3;
wire   [15:0] tmp_data_0_V_fu_823_p4;
wire   [1:0] tmp_data_0_V_fu_823_p5;
wire   [1:0] tmp_44_fu_849_p3;
wire   [1:0] tmp_45_fu_856_p1;
wire   [15:0] tmp_data_1_V_fu_866_p1;
wire   [15:0] tmp_data_1_V_fu_866_p2;
wire   [15:0] tmp_data_1_V_fu_866_p3;
wire   [15:0] tmp_data_1_V_fu_866_p4;
wire   [1:0] tmp_data_1_V_fu_866_p5;
wire   [1:0] tmp_47_fu_892_p3;
wire   [1:0] tmp_48_fu_899_p1;
wire   [15:0] tmp_data_2_V_fu_909_p1;
wire   [15:0] tmp_data_2_V_fu_909_p2;
wire   [15:0] tmp_data_2_V_fu_909_p3;
wire   [15:0] tmp_data_2_V_fu_909_p4;
wire   [1:0] tmp_data_2_V_fu_909_p5;
wire   [1:0] tmp_50_fu_935_p3;
wire   [1:0] tmp_51_fu_942_p1;
wire   [15:0] tmp_data_3_V_fu_952_p1;
wire   [15:0] tmp_data_3_V_fu_952_p2;
wire   [15:0] tmp_data_3_V_fu_952_p3;
wire   [15:0] tmp_data_3_V_fu_952_p4;
wire   [1:0] tmp_data_3_V_fu_952_p5;
wire    ap_CS_fsm_state7;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_317;
reg    ap_condition_779;
reg    ap_condition_277;
reg    ap_condition_784;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 pX_1 = 32'd0;
#0 sX_1 = 32'd0;
#0 pY_1 = 32'd0;
#0 sY_1 = 32'd0;
#0 kernel_data_V_4_4 = 6'd0;
#0 kernel_data_V_4_5 = 6'd0;
#0 kernel_data_V_4_6 = 6'd0;
#0 kernel_data_V_4_7 = 6'd0;
#0 kernel_data_V_4_12 = 6'd0;
#0 kernel_data_V_4_13 = 6'd0;
#0 kernel_data_V_4_14 = 6'd0;
#0 kernel_data_V_4_15 = 6'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s_line_bpcA #(
    .DataWidth( 6 ),
    .AddressRange( 19 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_4_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd18),
    .ce0(line_buffer_Array_V_4_0_0_ce0),
    .we0(line_buffer_Array_V_4_0_0_we0),
    .d0(data_V_data_0_V_dout),
    .q0(line_buffer_Array_V_4_0_0_q0)
);

pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s_line_bpcA #(
    .DataWidth( 6 ),
    .AddressRange( 19 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_4_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd18),
    .ce0(line_buffer_Array_V_4_0_1_ce0),
    .we0(line_buffer_Array_V_4_0_1_we0),
    .d0(data_V_data_1_V_dout),
    .q0(line_buffer_Array_V_4_0_1_q0)
);

pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s_line_bpcA #(
    .DataWidth( 6 ),
    .AddressRange( 19 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_4_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd18),
    .ce0(line_buffer_Array_V_4_0_2_ce0),
    .we0(line_buffer_Array_V_4_0_2_we0),
    .d0(data_V_data_2_V_dout),
    .q0(line_buffer_Array_V_4_0_2_q0)
);

pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s_line_bpcA #(
    .DataWidth( 6 ),
    .AddressRange( 19 ),
    .AddressWidth( 5 ))
line_buffer_Array_V_4_0_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(5'd18),
    .ce0(line_buffer_Array_V_4_0_3_ce0),
    .we0(line_buffer_Array_V_4_0_3_we0),
    .d0(data_V_data_3_V_dout),
    .q0(line_buffer_Array_V_4_0_3_q0)
);

materials_net_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
materials_net_mux_42_16_1_1_U164(
    .din0(tmp_data_0_V_fu_823_p1),
    .din1(tmp_data_0_V_fu_823_p2),
    .din2(tmp_data_0_V_fu_823_p3),
    .din3(tmp_data_0_V_fu_823_p4),
    .din4(tmp_data_0_V_fu_823_p5),
    .dout(tmp_data_0_V_fu_823_p6)
);

materials_net_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
materials_net_mux_42_16_1_1_U165(
    .din0(tmp_data_1_V_fu_866_p1),
    .din1(tmp_data_1_V_fu_866_p2),
    .din2(tmp_data_1_V_fu_866_p3),
    .din3(tmp_data_1_V_fu_866_p4),
    .din4(tmp_data_1_V_fu_866_p5),
    .dout(tmp_data_1_V_fu_866_p6)
);

materials_net_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
materials_net_mux_42_16_1_1_U166(
    .din0(tmp_data_2_V_fu_909_p1),
    .din1(tmp_data_2_V_fu_909_p2),
    .din2(tmp_data_2_V_fu_909_p3),
    .din3(tmp_data_2_V_fu_909_p4),
    .din4(tmp_data_2_V_fu_909_p5),
    .dout(tmp_data_2_V_fu_909_p6)
);

materials_net_mux_42_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
materials_net_mux_42_16_1_1_U167(
    .din0(tmp_data_3_V_fu_952_p1),
    .din1(tmp_data_3_V_fu_952_p2),
    .din2(tmp_data_3_V_fu_952_p3),
    .din3(tmp_data_3_V_fu_952_p4),
    .din4(tmp_data_3_V_fu_952_p5),
    .dout(tmp_data_3_V_fu_952_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_30_fu_756_p2 == 1'd1) & (tmp_29_fu_712_p2 == 1'd1) & (exitcond_flatten_reg_977 == 1'd0))) begin
        ap_phi_reg_pp0_iter1_storemerge_i_i_reg_247 <= 32'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_phi_reg_pp0_iter1_storemerge_i_i_reg_247 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_247;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_977 == 1'd0))) begin
        indvar_flatten_reg_236 <= indvar_flatten_next_reg_981;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_236 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_317)) begin
        if ((tmp_29_fu_712_p2 == 1'd1)) begin
            pX_1 <= 32'd0;
        end else if ((tmp_29_fu_712_p2 == 1'd0)) begin
            pX_1 <= tmp_31_fu_718_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_779)) begin
        if ((tmp_30_fu_756_p2 == 1'd1)) begin
            pY_1 <= 32'd0;
        end else if ((tmp_30_fu_756_p2 == 1'd0)) begin
            pY_1 <= tmp_32_fu_762_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_784)) begin
            sX_1 <= p_in_i_i_reg_1182;
        end else if ((1'b1 == ap_condition_277)) begin
            sX_1 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_977 == 1'd0))) begin
        DataOut_V_31_reg_1010 <= line_buffer_Array_V_4_0_0_q0;
        DataOut_V_32_reg_1016 <= line_buffer_Array_V_4_0_1_q0;
        DataOut_V_33_reg_1022 <= line_buffer_Array_V_4_0_2_q0;
        DataOut_V_reg_1028 <= line_buffer_Array_V_4_0_3_q0;
        tmp_data_0_V_4_reg_986 <= data_V_data_0_V_dout;
        tmp_data_1_V_4_reg_992 <= data_V_data_1_V_dout;
        tmp_data_2_V_4_reg_998 <= data_V_data_2_V_dout;
        tmp_data_3_V_4_reg_1004 <= data_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten_reg_977 <= exitcond_flatten_fu_258_p2;
        exitcond_flatten_reg_977_pp0_iter1_reg <= exitcond_flatten_reg_977;
        tmp_29_reg_1178 <= tmp_29_fu_712_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_next_reg_981 <= indvar_flatten_next_fu_264_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_977 == 1'd0))) begin
        kernel_data_V_4_12 <= tmp_data_0_V_4_reg_986;
        kernel_data_V_4_13 <= tmp_data_1_V_4_reg_992;
        kernel_data_V_4_14 <= tmp_data_2_V_4_reg_998;
        kernel_data_V_4_15 <= tmp_data_3_V_4_reg_1004;
        kernel_data_V_4_4 <= DataOut_V_31_reg_1010;
        kernel_data_V_4_5 <= DataOut_V_32_reg_1016;
        kernel_data_V_4_6 <= DataOut_V_33_reg_1022;
        kernel_data_V_4_7 <= DataOut_V_reg_1028;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_977 == 1'd0))) begin
        or_cond33_i_i_reg_1034 <= or_cond33_i_i_fu_450_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_29_fu_712_p2 == 1'd1) & (tmp_30_fu_756_p2 == 1'd0) & (exitcond_flatten_reg_977 == 1'd0))) begin
        p_in28_i_i_reg_1191 <= p_in28_i_i_fu_780_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_29_fu_712_p2 == 1'd0))) begin
        p_in_i_i_reg_1182 <= p_in_i_i_fu_736_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (or_cond33_i_i_fu_450_p2 == 1'd1))) begin
        pool_window_0_V_1_reg_1038[9 : 4] <= pool_window_0_V_1_fu_456_p3[9 : 4];
        pool_window_0_V_2_reg_1073[9 : 4] <= pool_window_0_V_2_fu_520_p3[9 : 4];
        pool_window_0_V_4_reg_1108[9 : 4] <= pool_window_0_V_4_fu_584_p3[9 : 4];
        pool_window_0_V_7_reg_1143[9 : 4] <= pool_window_0_V_7_fu_648_p3[9 : 4];
        pool_window_1_V_1_reg_1043[9 : 4] <= pool_window_1_V_1_fu_464_p3[9 : 4];
        pool_window_1_V_2_reg_1078[9 : 4] <= pool_window_1_V_2_fu_528_p3[9 : 4];
        pool_window_1_V_4_reg_1113[9 : 4] <= pool_window_1_V_4_fu_592_p3[9 : 4];
        pool_window_1_V_7_reg_1148[9 : 4] <= pool_window_1_V_7_fu_656_p3[9 : 4];
        pool_window_2_V_1_reg_1048[9 : 4] <= pool_window_2_V_1_fu_471_p3[9 : 4];
        pool_window_2_V_2_reg_1083[9 : 4] <= pool_window_2_V_2_fu_535_p3[9 : 4];
        pool_window_2_V_4_reg_1118[9 : 4] <= pool_window_2_V_4_fu_599_p3[9 : 4];
        pool_window_2_V_7_reg_1153[9 : 4] <= pool_window_2_V_7_fu_663_p3[9 : 4];
        pool_window_3_V_1_reg_1053[9 : 4] <= pool_window_3_V_1_fu_479_p3[9 : 4];
        pool_window_3_V_2_reg_1088[9 : 4] <= pool_window_3_V_2_fu_543_p3[9 : 4];
        pool_window_3_V_4_reg_1123[9 : 4] <= pool_window_3_V_4_fu_607_p3[9 : 4];
        pool_window_3_V_7_reg_1158[9 : 4] <= pool_window_3_V_7_fu_671_p3[9 : 4];
        tmp_191_1_reg_1093 <= tmp_191_1_fu_550_p2;
        tmp_191_2_reg_1128 <= tmp_191_2_fu_614_p2;
        tmp_191_3_reg_1163 <= tmp_191_3_fu_678_p2;
        tmp_192_1_reg_1098 <= tmp_192_1_fu_564_p2;
        tmp_192_2_reg_1133 <= tmp_192_2_fu_628_p2;
        tmp_192_3_reg_1168 <= tmp_192_3_fu_692_p2;
        tmp_193_1_reg_1103 <= tmp_193_1_fu_578_p2;
        tmp_193_2_reg_1138 <= tmp_193_2_fu_642_p2;
        tmp_193_3_reg_1173 <= tmp_193_3_fu_706_p2;
        tmp_38_reg_1058 <= tmp_38_fu_486_p2;
        tmp_39_reg_1063 <= tmp_39_fu_500_p2;
        tmp_41_reg_1068 <= tmp_41_fu_514_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (tmp_29_reg_1178 == 1'd1))) begin
        sY_1 <= ap_phi_mux_storemerge_i_i_phi_fu_251_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_29_fu_712_p2 == 1'd1))) begin
        tmp_30_reg_1187 <= tmp_30_fu_756_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (or_cond33_i_i_reg_1034 == 1'd1))) begin
        tmp_data_0_V_reg_1196 <= tmp_data_0_V_fu_823_p6;
        tmp_data_1_V_reg_1201 <= tmp_data_1_V_fu_866_p6;
        tmp_data_2_V_reg_1206 <= tmp_data_2_V_fu_909_p6;
        tmp_data_3_V_reg_1211 <= tmp_data_3_V_fu_952_p6;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_258_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_977 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_240_p4 = indvar_flatten_next_reg_981;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_240_p4 = indvar_flatten_reg_236;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_29_reg_1178 == 1'd1) & (tmp_30_reg_1187 == 1'd0) & (exitcond_flatten_reg_977_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        ap_phi_mux_storemerge_i_i_phi_fu_251_p4 = p_in28_i_i_reg_1191;
    end else begin
        ap_phi_mux_storemerge_i_i_phi_fu_251_p4 = ap_phi_reg_pp0_iter1_storemerge_i_i_reg_247;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_977 == 1'd0))) begin
        data_V_data_0_V0_update = 1'b1;
    end else begin
        data_V_data_0_V0_update = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_977 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_977 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_977 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_977 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_977 == 1'd0))) begin
        line_buffer_Array_V_4_0_0_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_977 == 1'd0))) begin
        line_buffer_Array_V_4_0_0_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_977 == 1'd0))) begin
        line_buffer_Array_V_4_0_1_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_977 == 1'd0))) begin
        line_buffer_Array_V_4_0_1_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_977 == 1'd0))) begin
        line_buffer_Array_V_4_0_2_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_977 == 1'd0))) begin
        line_buffer_Array_V_4_0_2_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_977 == 1'd0))) begin
        line_buffer_Array_V_4_0_3_ce0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (exitcond_flatten_reg_977 == 1'd0))) begin
        line_buffer_Array_V_4_0_3_we0 = 1'd1;
    end else begin
        line_buffer_Array_V_4_0_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (or_cond33_i_i_reg_1034 == 1'd1))) begin
        res_V_data_0_V1_update = 1'b1;
    end else begin
        res_V_data_0_V1_update = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_cond33_i_i_reg_1034 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_cond33_i_i_reg_1034 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_cond33_i_i_reg_1034 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_cond33_i_i_reg_1034 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_fu_258_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_fu_258_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((res_V_data_0_V1_status == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (or_cond33_i_i_reg_1034 == 1'd1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((res_V_data_0_V1_status == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (or_cond33_i_i_reg_1034 == 1'd1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((res_V_data_0_V1_status == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (or_cond33_i_i_reg_1034 == 1'd1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((data_V_data_0_V0_status == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_reg_977 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((data_V_data_0_V0_status == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_reg_977 == 1'd0));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((data_V_data_0_V0_status == 1'b0) & (exitcond_flatten_reg_977 == 1'd0));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter2 = ((res_V_data_0_V1_status == 1'b0) & (or_cond33_i_i_reg_1034 == 1'd1));
end

always @ (*) begin
    ap_condition_277 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_29_fu_712_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_317 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_779 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_29_fu_712_p2 == 1'd1) & (exitcond_flatten_reg_977 == 1'd0));
end

always @ (*) begin
    ap_condition_784 = ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (tmp_29_reg_1178 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_storemerge_i_i_reg_247 = 'bx;

assign ap_ready = internal_ap_ready;

assign data_V_data_0_V0_status = (data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign data_V_data_0_V_read = data_V_data_0_V0_update;

assign data_V_data_1_V_read = data_V_data_0_V0_update;

assign data_V_data_2_V_read = data_V_data_0_V0_update;

assign data_V_data_3_V_read = data_V_data_0_V0_update;

assign exitcond_flatten_fu_258_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_240_p4 == 9'd266) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_264_p2 = (ap_phi_mux_indvar_flatten_phi_fu_240_p4 + 9'd1);

assign or_cond33_i_i_fu_450_p2 = (tmp2_fu_444_p2 & tmp1_fu_438_p2);

assign p_in28_i_i_fu_780_p3 = ((tmp_26_fu_412_p2[0:0] === 1'b1) ? 32'd0 : phitmp39_i_i_fu_774_p2);

assign p_in_i_i_fu_736_p3 = ((tmp_25_fu_402_p2[0:0] === 1'b1) ? 32'd0 : phitmp_i_i_fu_730_p2);

assign p_phi1_fu_492_p3 = ((tmp_38_fu_486_p2[0:0] === 1'b1) ? pool_window_1_V_1_fu_464_p3 : pool_window_0_V_1_fu_456_p3);

assign p_phi2_fu_506_p3 = ((tmp_39_fu_500_p2[0:0] === 1'b1) ? pool_window_3_V_1_fu_479_p3 : pool_window_2_V_1_fu_471_p3);

assign p_phi3_fu_556_p3 = ((tmp_191_1_fu_550_p2[0:0] === 1'b1) ? pool_window_1_V_2_fu_528_p3 : pool_window_0_V_2_fu_520_p3);

assign p_phi4_fu_570_p3 = ((tmp_192_1_fu_564_p2[0:0] === 1'b1) ? pool_window_3_V_2_fu_543_p3 : pool_window_2_V_2_fu_535_p3);

assign p_phi5_fu_620_p3 = ((tmp_191_2_fu_614_p2[0:0] === 1'b1) ? pool_window_1_V_4_fu_592_p3 : pool_window_0_V_4_fu_584_p3);

assign p_phi6_fu_634_p3 = ((tmp_192_2_fu_628_p2[0:0] === 1'b1) ? pool_window_3_V_4_fu_607_p3 : pool_window_2_V_4_fu_599_p3);

assign p_phi7_fu_684_p3 = ((tmp_191_3_fu_678_p2[0:0] === 1'b1) ? pool_window_1_V_7_fu_656_p3 : pool_window_0_V_7_fu_648_p3);

assign p_phi_fu_698_p3 = ((tmp_192_3_fu_692_p2[0:0] === 1'b1) ? pool_window_3_V_7_fu_671_p3 : pool_window_2_V_7_fu_663_p3);

assign phitmp39_i_i_fu_774_p2 = (sY_1 + 32'd1);

assign phitmp_i_i_fu_730_p2 = (sX_1 + 32'd1);

assign pool_window_0_V_1_fu_456_p3 = {{kernel_data_V_4_4}, {4'd0}};

assign pool_window_0_V_2_fu_520_p3 = {{kernel_data_V_4_5}, {4'd0}};

assign pool_window_0_V_4_fu_584_p3 = {{kernel_data_V_4_6}, {4'd0}};

assign pool_window_0_V_7_fu_648_p3 = {{kernel_data_V_4_7}, {4'd0}};

assign pool_window_1_V_1_fu_464_p3 = {{DataOut_V_31_reg_1010}, {4'd0}};

assign pool_window_1_V_2_fu_528_p3 = {{DataOut_V_32_reg_1016}, {4'd0}};

assign pool_window_1_V_4_fu_592_p3 = {{DataOut_V_33_reg_1022}, {4'd0}};

assign pool_window_1_V_7_fu_656_p3 = {{DataOut_V_reg_1028}, {4'd0}};

assign pool_window_2_V_1_fu_471_p3 = {{kernel_data_V_4_12}, {4'd0}};

assign pool_window_2_V_2_fu_535_p3 = {{kernel_data_V_4_13}, {4'd0}};

assign pool_window_2_V_4_fu_599_p3 = {{kernel_data_V_4_14}, {4'd0}};

assign pool_window_2_V_7_fu_663_p3 = {{kernel_data_V_4_15}, {4'd0}};

assign pool_window_3_V_1_fu_479_p3 = {{tmp_data_0_V_4_reg_986}, {4'd0}};

assign pool_window_3_V_2_fu_543_p3 = {{tmp_data_1_V_4_reg_992}, {4'd0}};

assign pool_window_3_V_4_fu_607_p3 = {{tmp_data_2_V_4_reg_998}, {4'd0}};

assign pool_window_3_V_7_fu_671_p3 = {{tmp_data_3_V_4_reg_1004}, {4'd0}};

assign res_V_data_0_V1_status = (res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign res_V_data_0_V_din = tmp_data_0_V_reg_1196;

assign res_V_data_0_V_write = res_V_data_0_V1_update;

assign res_V_data_1_V_din = tmp_data_1_V_reg_1201;

assign res_V_data_1_V_write = res_V_data_0_V1_update;

assign res_V_data_2_V_din = tmp_data_2_V_reg_1206;

assign res_V_data_2_V_write = res_V_data_0_V1_update;

assign res_V_data_3_V_din = tmp_data_3_V_reg_1211;

assign res_V_data_3_V_write = res_V_data_0_V1_update;

assign start_out = real_start;

assign tmp1_fu_438_p2 = (tmp_26_fu_412_p2 & tmp_25_fu_402_p2);

assign tmp2_fu_444_p2 = (tmp_28_fu_432_p2 & tmp_27_fu_422_p2);

assign tmp_191_1_fu_550_p2 = ((pool_window_0_V_2_fu_520_p3 < pool_window_1_V_2_fu_528_p3) ? 1'b1 : 1'b0);

assign tmp_191_2_fu_614_p2 = ((pool_window_0_V_4_fu_584_p3 < pool_window_1_V_4_fu_592_p3) ? 1'b1 : 1'b0);

assign tmp_191_3_fu_678_p2 = ((pool_window_0_V_7_fu_648_p3 < pool_window_1_V_7_fu_656_p3) ? 1'b1 : 1'b0);

assign tmp_192_1_fu_564_p2 = ((pool_window_2_V_2_fu_535_p3 < pool_window_3_V_2_fu_543_p3) ? 1'b1 : 1'b0);

assign tmp_192_2_fu_628_p2 = ((pool_window_2_V_4_fu_599_p3 < pool_window_3_V_4_fu_607_p3) ? 1'b1 : 1'b0);

assign tmp_192_3_fu_692_p2 = ((pool_window_2_V_7_fu_663_p3 < pool_window_3_V_7_fu_671_p3) ? 1'b1 : 1'b0);

assign tmp_193_1_fu_578_p2 = ((p_phi3_fu_556_p3 < p_phi4_fu_570_p3) ? 1'b1 : 1'b0);

assign tmp_193_2_fu_642_p2 = ((p_phi5_fu_620_p3 < p_phi6_fu_634_p3) ? 1'b1 : 1'b0);

assign tmp_193_3_fu_706_p2 = ((p_phi7_fu_684_p3 < p_phi_fu_698_p3) ? 1'b1 : 1'b0);

assign tmp_25_fu_402_p2 = ((sX_1 == 32'd1) ? 1'b1 : 1'b0);

assign tmp_26_fu_412_p2 = ((sY_1 == 32'd1) ? 1'b1 : 1'b0);

assign tmp_27_fu_422_p2 = (($signed(pY_1) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign tmp_28_fu_432_p2 = (($signed(pX_1) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign tmp_29_fu_712_p2 = ((pX_1 == 32'd18) ? 1'b1 : 1'b0);

assign tmp_30_fu_756_p2 = ((pY_1 == 32'd13) ? 1'b1 : 1'b0);

assign tmp_31_fu_718_p2 = (pX_1 + 32'd1);

assign tmp_32_fu_762_p2 = (pY_1 + 32'd1);

assign tmp_38_fu_486_p2 = ((pool_window_0_V_1_fu_456_p3 < pool_window_1_V_1_fu_464_p3) ? 1'b1 : 1'b0);

assign tmp_39_fu_500_p2 = ((pool_window_2_V_1_fu_471_p3 < pool_window_3_V_1_fu_479_p3) ? 1'b1 : 1'b0);

assign tmp_40_fu_806_p3 = ((tmp_39_reg_1063[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign tmp_41_fu_514_p2 = ((p_phi1_fu_492_p3 < p_phi2_fu_506_p3) ? 1'b1 : 1'b0);

assign tmp_42_fu_813_p1 = tmp_38_reg_1058;

assign tmp_44_fu_849_p3 = ((tmp_192_1_reg_1098[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign tmp_45_fu_856_p1 = tmp_191_1_reg_1093;

assign tmp_47_fu_892_p3 = ((tmp_192_2_reg_1133[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign tmp_48_fu_899_p1 = tmp_191_2_reg_1128;

assign tmp_50_fu_935_p3 = ((tmp_192_3_reg_1168[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign tmp_51_fu_942_p1 = tmp_191_3_reg_1163;

assign tmp_data_0_V_fu_823_p1 = pool_window_0_V_1_reg_1038;

assign tmp_data_0_V_fu_823_p2 = pool_window_1_V_1_reg_1043;

assign tmp_data_0_V_fu_823_p3 = pool_window_2_V_1_reg_1048;

assign tmp_data_0_V_fu_823_p4 = pool_window_3_V_1_reg_1053;

assign tmp_data_0_V_fu_823_p5 = ((tmp_41_reg_1068[0:0] === 1'b1) ? tmp_40_fu_806_p3 : tmp_42_fu_813_p1);

assign tmp_data_1_V_fu_866_p1 = pool_window_0_V_2_reg_1073;

assign tmp_data_1_V_fu_866_p2 = pool_window_1_V_2_reg_1078;

assign tmp_data_1_V_fu_866_p3 = pool_window_2_V_2_reg_1083;

assign tmp_data_1_V_fu_866_p4 = pool_window_3_V_2_reg_1088;

assign tmp_data_1_V_fu_866_p5 = ((tmp_193_1_reg_1103[0:0] === 1'b1) ? tmp_44_fu_849_p3 : tmp_45_fu_856_p1);

assign tmp_data_2_V_fu_909_p1 = pool_window_0_V_4_reg_1108;

assign tmp_data_2_V_fu_909_p2 = pool_window_1_V_4_reg_1113;

assign tmp_data_2_V_fu_909_p3 = pool_window_2_V_4_reg_1118;

assign tmp_data_2_V_fu_909_p4 = pool_window_3_V_4_reg_1123;

assign tmp_data_2_V_fu_909_p5 = ((tmp_193_2_reg_1138[0:0] === 1'b1) ? tmp_47_fu_892_p3 : tmp_48_fu_899_p1);

assign tmp_data_3_V_fu_952_p1 = pool_window_0_V_7_reg_1143;

assign tmp_data_3_V_fu_952_p2 = pool_window_1_V_7_reg_1148;

assign tmp_data_3_V_fu_952_p3 = pool_window_2_V_7_reg_1153;

assign tmp_data_3_V_fu_952_p4 = pool_window_3_V_7_reg_1158;

assign tmp_data_3_V_fu_952_p5 = ((tmp_193_3_reg_1173[0:0] === 1'b1) ? tmp_50_fu_935_p3 : tmp_51_fu_942_p1);

always @ (posedge ap_clk) begin
    pool_window_0_V_1_reg_1038[3:0] <= 4'b0000;
    pool_window_1_V_1_reg_1043[3:0] <= 4'b0000;
    pool_window_2_V_1_reg_1048[3:0] <= 4'b0000;
    pool_window_3_V_1_reg_1053[3:0] <= 4'b0000;
    pool_window_0_V_2_reg_1073[3:0] <= 4'b0000;
    pool_window_1_V_2_reg_1078[3:0] <= 4'b0000;
    pool_window_2_V_2_reg_1083[3:0] <= 4'b0000;
    pool_window_3_V_2_reg_1088[3:0] <= 4'b0000;
    pool_window_0_V_4_reg_1108[3:0] <= 4'b0000;
    pool_window_1_V_4_reg_1113[3:0] <= 4'b0000;
    pool_window_2_V_4_reg_1118[3:0] <= 4'b0000;
    pool_window_3_V_4_reg_1123[3:0] <= 4'b0000;
    pool_window_0_V_7_reg_1143[3:0] <= 4'b0000;
    pool_window_1_V_7_reg_1148[3:0] <= 4'b0000;
    pool_window_2_V_7_reg_1153[3:0] <= 4'b0000;
    pool_window_3_V_7_reg_1158[3:0] <= 4'b0000;
end

endmodule //pooling2d_cl_array_ap_ufixed_4u_array_ap_fixed_16_6_5_3_0_4u_config9_s
