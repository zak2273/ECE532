-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_array_ap_fixed_6u_array_ap_fixed_16_6_5_3_0_16u_config15_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_stream_V_data_0_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_stream_V_data_0_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_0_V_read : OUT STD_LOGIC;
    data_stream_V_data_1_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_stream_V_data_1_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_1_V_read : OUT STD_LOGIC;
    data_stream_V_data_2_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_stream_V_data_2_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_2_V_read : OUT STD_LOGIC;
    data_stream_V_data_3_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_stream_V_data_3_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_3_V_read : OUT STD_LOGIC;
    data_stream_V_data_4_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_stream_V_data_4_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_4_V_read : OUT STD_LOGIC;
    data_stream_V_data_5_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_stream_V_data_5_V_empty_n : IN STD_LOGIC;
    data_stream_V_data_5_V_read : OUT STD_LOGIC;
    res_stream_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_0_V_full_n : IN STD_LOGIC;
    res_stream_V_data_0_V_write : OUT STD_LOGIC;
    res_stream_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_1_V_full_n : IN STD_LOGIC;
    res_stream_V_data_1_V_write : OUT STD_LOGIC;
    res_stream_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_2_V_full_n : IN STD_LOGIC;
    res_stream_V_data_2_V_write : OUT STD_LOGIC;
    res_stream_V_data_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_3_V_full_n : IN STD_LOGIC;
    res_stream_V_data_3_V_write : OUT STD_LOGIC;
    res_stream_V_data_4_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_4_V_full_n : IN STD_LOGIC;
    res_stream_V_data_4_V_write : OUT STD_LOGIC;
    res_stream_V_data_5_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_5_V_full_n : IN STD_LOGIC;
    res_stream_V_data_5_V_write : OUT STD_LOGIC;
    res_stream_V_data_6_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_6_V_full_n : IN STD_LOGIC;
    res_stream_V_data_6_V_write : OUT STD_LOGIC;
    res_stream_V_data_7_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_7_V_full_n : IN STD_LOGIC;
    res_stream_V_data_7_V_write : OUT STD_LOGIC;
    res_stream_V_data_8_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_8_V_full_n : IN STD_LOGIC;
    res_stream_V_data_8_V_write : OUT STD_LOGIC;
    res_stream_V_data_9_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_9_V_full_n : IN STD_LOGIC;
    res_stream_V_data_9_V_write : OUT STD_LOGIC;
    res_stream_V_data_10_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_10_V_full_n : IN STD_LOGIC;
    res_stream_V_data_10_V_write : OUT STD_LOGIC;
    res_stream_V_data_11_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_11_V_full_n : IN STD_LOGIC;
    res_stream_V_data_11_V_write : OUT STD_LOGIC;
    res_stream_V_data_12_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_12_V_full_n : IN STD_LOGIC;
    res_stream_V_data_12_V_write : OUT STD_LOGIC;
    res_stream_V_data_13_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_13_V_full_n : IN STD_LOGIC;
    res_stream_V_data_13_V_write : OUT STD_LOGIC;
    res_stream_V_data_14_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_14_V_full_n : IN STD_LOGIC;
    res_stream_V_data_14_V_write : OUT STD_LOGIC;
    res_stream_V_data_15_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_stream_V_data_15_V_full_n : IN STD_LOGIC;
    res_stream_V_data_15_V_write : OUT STD_LOGIC );
end;


architecture behav of dense_array_ap_fixed_6u_array_ap_fixed_16_6_5_3_0_16u_config15_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal data_stream_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_reg_843 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_stream_V_data_1_V_blk_n : STD_LOGIC;
    signal data_stream_V_data_2_V_blk_n : STD_LOGIC;
    signal data_stream_V_data_3_V_blk_n : STD_LOGIC;
    signal data_stream_V_data_4_V_blk_n : STD_LOGIC;
    signal data_stream_V_data_5_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal res_stream_V_data_1_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_2_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_3_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_4_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_5_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_6_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_7_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_8_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_9_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_10_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_11_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_12_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_13_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_14_V_blk_n : STD_LOGIC;
    signal res_stream_V_data_15_V_blk_n : STD_LOGIC;
    signal data_V_11_s_reg_430 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_10_s_reg_442 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_9_s_reg_454 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_8_s_reg_466 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_7_s_reg_478 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_6_s_reg_490 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_5_s_reg_502 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_4_s_reg_514 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_3_s_reg_526 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_2_s_reg_538 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_1_s_reg_550 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_V_0_s_reg_562 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_in_reg_574 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal data_stream_V_data_0_V0_status : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_in_1_fu_619_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal cond_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cond_reg_852 : STD_LOGIC_VECTOR (0 downto 0);
    signal cond9_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cond9_reg_866 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_6_V_1_fu_695_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_6_V_2_fu_702_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_7_V_1_fu_709_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_7_V_2_fu_716_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_8_V_1_fu_723_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_8_V_2_fu_730_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_9_V_1_fu_737_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_9_V_2_fu_744_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_10_V_1_fu_751_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_10_V_2_fu_758_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_11_V_1_fu_765_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_11_V_2_fu_772_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_0_V_reg_932 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_data_1_V_reg_937 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_2_V_reg_942 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_3_V_reg_947 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_4_V_reg_952 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_5_V_reg_957 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_6_V_reg_962 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_7_V_reg_967 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_8_V_reg_972 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_9_V_reg_977 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_10_V_reg_982 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_11_V_reg_987 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_12_V_reg_992 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_13_V_reg_997 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_14_V_reg_1002 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_15_V_reg_1007 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_start : STD_LOGIC;
    signal grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_done : STD_LOGIC;
    signal grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_idle : STD_LOGIC;
    signal grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_ready : STD_LOGIC;
    signal grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_9 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_11 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_12 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_13 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_14 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_15 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm_state4 : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal data_stream_V_data_0_V0_update : STD_LOGIC;
    signal res_stream_V_data_0_V1_update : STD_LOGIC;
    signal res_stream_V_data_0_V1_status : STD_LOGIC;
    signal tmp_456_fu_625_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_457_fu_637_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl_fu_629_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl19_cast_fu_643_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_647_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_346_122_t_fu_659_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_10_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_11_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585 : component dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_start,
        ap_done => grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_done,
        ap_idle => grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_idle,
        ap_ready => grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_ready,
        data_0_V_read => data_V_0_s_reg_562,
        data_1_V_read => data_V_1_s_reg_550,
        data_2_V_read => data_V_2_s_reg_538,
        data_3_V_read => data_V_3_s_reg_526,
        data_4_V_read => data_V_4_s_reg_514,
        data_5_V_read => data_V_5_s_reg_502,
        data_6_V_read => data_V_6_s_reg_490,
        data_7_V_read => data_V_7_s_reg_478,
        data_8_V_read => data_V_8_s_reg_466,
        data_9_V_read => data_V_9_s_reg_454,
        data_10_V_read => data_V_10_s_reg_442,
        data_11_V_read => data_V_11_s_reg_430,
        ap_return_0 => grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_0,
        ap_return_1 => grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_1,
        ap_return_2 => grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_2,
        ap_return_3 => grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_3,
        ap_return_4 => grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_4,
        ap_return_5 => grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_5,
        ap_return_6 => grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_6,
        ap_return_7 => grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_7,
        ap_return_8 => grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_8,
        ap_return_9 => grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_9,
        ap_return_10 => grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_10,
        ap_return_11 => grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_11,
        ap_return_12 => grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_12,
        ap_return_13 => grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_13,
        ap_return_14 => grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_14,
        ap_return_15 => grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_15);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((res_stream_V_data_0_V1_status = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                    grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_ready = ap_const_logic_1)) then 
                    grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_in_reg_574_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_613_p2 = ap_const_lv1_0))) then 
                i_in_reg_574 <= i_in_1_fu_619_p2;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_in_reg_574 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_613_p2 = ap_const_lv1_0))) then
                cond9_reg_866 <= cond9_fu_665_p2;
                cond_reg_852 <= cond_fu_653_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_843 = ap_const_lv1_0))) then
                data_V_0_s_reg_562 <= data_6_V_2_fu_702_p3;
                data_V_10_s_reg_442 <= data_10_V_1_fu_751_p3;
                data_V_11_s_reg_430 <= data_11_V_1_fu_765_p3;
                data_V_1_s_reg_550 <= data_7_V_2_fu_716_p3;
                data_V_2_s_reg_538 <= data_8_V_2_fu_730_p3;
                data_V_3_s_reg_526 <= data_9_V_2_fu_744_p3;
                data_V_4_s_reg_514 <= data_10_V_2_fu_758_p3;
                data_V_5_s_reg_502 <= data_11_V_2_fu_772_p3;
                data_V_6_s_reg_490 <= data_6_V_1_fu_695_p3;
                data_V_7_s_reg_478 <= data_7_V_1_fu_709_p3;
                data_V_8_s_reg_466 <= data_8_V_1_fu_723_p3;
                data_V_9_s_reg_454 <= data_9_V_1_fu_737_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_data_0_V_reg_932 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_0;
                tmp_data_10_V_reg_982 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_10;
                tmp_data_11_V_reg_987 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_11;
                tmp_data_12_V_reg_992 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_12;
                tmp_data_13_V_reg_997 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_13;
                tmp_data_14_V_reg_1002 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_14;
                tmp_data_15_V_reg_1007 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_15;
                tmp_data_1_V_reg_937 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_1;
                tmp_data_2_V_reg_942 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_2;
                tmp_data_3_V_reg_947 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_3;
                tmp_data_4_V_reg_952 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_4;
                tmp_data_5_V_reg_957 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_5;
                tmp_data_6_V_reg_962 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_6;
                tmp_data_7_V_reg_967 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_7;
                tmp_data_8_V_reg_972 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_8;
                tmp_data_9_V_reg_977 <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_return_9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_reg_843 <= tmp_fu_613_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state14, tmp_fu_613_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, res_stream_V_data_0_V1_status)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (tmp_fu_613_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (tmp_fu_613_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((res_stream_V_data_0_V1_status = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(11);
    ap_CS_fsm_state14 <= ap_CS_fsm(12);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_NS_fsm_state4 <= ap_NS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, tmp_reg_843, data_stream_V_data_0_V0_status)
    begin
                ap_block_pp0_stage0_11001 <= ((data_stream_V_data_0_V0_status = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_reg_843 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, tmp_reg_843, data_stream_V_data_0_V0_status)
    begin
                ap_block_pp0_stage0_subdone <= ((data_stream_V_data_0_V0_status = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_reg_843 = ap_const_lv1_0));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(tmp_reg_843, data_stream_V_data_0_V0_status)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((data_stream_V_data_0_V0_status = ap_const_logic_0) and (tmp_reg_843 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(tmp_fu_613_p2)
    begin
        if ((tmp_fu_613_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state14, res_stream_V_data_0_V1_status)
    begin
        if (((res_stream_V_data_0_V1_status = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    cond9_fu_665_p2 <= "1" when (tmp_346_122_t_fu_659_p2 = ap_const_lv4_1) else "0";
    cond_fu_653_p2 <= "1" when (p_shl_fu_629_p3 = p_shl19_cast_fu_643_p1) else "0";
    data_10_V_1_fu_751_p3 <= 
        data_V_10_s_reg_442 when (cond_reg_852(0) = '1') else 
        data_stream_V_data_4_V_dout;
    data_10_V_2_fu_758_p3 <= 
        data_stream_V_data_4_V_dout when (cond_reg_852(0) = '1') else 
        data_V_4_s_reg_514;
    data_11_V_1_fu_765_p3 <= 
        data_V_11_s_reg_430 when (cond_reg_852(0) = '1') else 
        data_stream_V_data_5_V_dout;
    data_11_V_2_fu_772_p3 <= 
        data_stream_V_data_5_V_dout when (cond_reg_852(0) = '1') else 
        data_V_5_s_reg_502;
    data_6_V_1_fu_695_p3 <= 
        data_V_6_s_reg_490 when (cond_reg_852(0) = '1') else 
        data_stream_V_data_0_V_dout;
    data_6_V_2_fu_702_p3 <= 
        data_stream_V_data_0_V_dout when (cond_reg_852(0) = '1') else 
        data_V_0_s_reg_562;
    data_7_V_1_fu_709_p3 <= 
        data_V_7_s_reg_478 when (cond9_reg_866(0) = '1') else 
        data_stream_V_data_1_V_dout;
    data_7_V_2_fu_716_p3 <= 
        data_stream_V_data_1_V_dout when (cond9_reg_866(0) = '1') else 
        data_V_1_s_reg_550;
    data_8_V_1_fu_723_p3 <= 
        data_V_8_s_reg_466 when (cond_reg_852(0) = '1') else 
        data_stream_V_data_2_V_dout;
    data_8_V_2_fu_730_p3 <= 
        data_stream_V_data_2_V_dout when (cond_reg_852(0) = '1') else 
        data_V_2_s_reg_538;
    data_9_V_1_fu_737_p3 <= 
        data_V_9_s_reg_454 when (cond_reg_852(0) = '1') else 
        data_stream_V_data_3_V_dout;
    data_9_V_2_fu_744_p3 <= 
        data_stream_V_data_3_V_dout when (cond_reg_852(0) = '1') else 
        data_V_3_s_reg_526;
    data_stream_V_data_0_V0_status <= (data_stream_V_data_5_V_empty_n and data_stream_V_data_4_V_empty_n and data_stream_V_data_3_V_empty_n and data_stream_V_data_2_V_empty_n and data_stream_V_data_1_V_empty_n and data_stream_V_data_0_V_empty_n);

    data_stream_V_data_0_V0_update_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_843, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_843 = ap_const_lv1_0))) then 
            data_stream_V_data_0_V0_update <= ap_const_logic_1;
        else 
            data_stream_V_data_0_V0_update <= ap_const_logic_0;
        end if; 
    end process;


    data_stream_V_data_0_V_blk_n_assign_proc : process(data_stream_V_data_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_reg_843)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_843 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_stream_V_data_0_V_blk_n <= data_stream_V_data_0_V_empty_n;
        else 
            data_stream_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_stream_V_data_0_V_read <= data_stream_V_data_0_V0_update;

    data_stream_V_data_1_V_blk_n_assign_proc : process(data_stream_V_data_1_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_reg_843)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_843 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_stream_V_data_1_V_blk_n <= data_stream_V_data_1_V_empty_n;
        else 
            data_stream_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_stream_V_data_1_V_read <= data_stream_V_data_0_V0_update;

    data_stream_V_data_2_V_blk_n_assign_proc : process(data_stream_V_data_2_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_reg_843)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_843 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_stream_V_data_2_V_blk_n <= data_stream_V_data_2_V_empty_n;
        else 
            data_stream_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_stream_V_data_2_V_read <= data_stream_V_data_0_V0_update;

    data_stream_V_data_3_V_blk_n_assign_proc : process(data_stream_V_data_3_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_reg_843)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_843 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_stream_V_data_3_V_blk_n <= data_stream_V_data_3_V_empty_n;
        else 
            data_stream_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_stream_V_data_3_V_read <= data_stream_V_data_0_V0_update;

    data_stream_V_data_4_V_blk_n_assign_proc : process(data_stream_V_data_4_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_reg_843)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_843 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_stream_V_data_4_V_blk_n <= data_stream_V_data_4_V_empty_n;
        else 
            data_stream_V_data_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_stream_V_data_4_V_read <= data_stream_V_data_0_V0_update;

    data_stream_V_data_5_V_blk_n_assign_proc : process(data_stream_V_data_5_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_reg_843)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_843 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_stream_V_data_5_V_blk_n <= data_stream_V_data_5_V_empty_n;
        else 
            data_stream_V_data_5_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_stream_V_data_5_V_read <= data_stream_V_data_0_V0_update;
    grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_start <= grp_dense_wrapper_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config15_s_fu_585_ap_start_reg;
    i_in_1_fu_619_p2 <= std_logic_vector(unsigned(i_in_reg_574) + unsigned(ap_const_lv2_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state14, res_stream_V_data_0_V1_status)
    begin
        if (((res_stream_V_data_0_V1_status = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    p_shl19_cast_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_457_fu_637_p2),4));
    p_shl_fu_629_p3 <= (tmp_456_fu_625_p1 & ap_const_lv3_0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    res_stream_V_data_0_V1_status <= (res_stream_V_data_9_V_full_n and res_stream_V_data_8_V_full_n and res_stream_V_data_7_V_full_n and res_stream_V_data_6_V_full_n and res_stream_V_data_5_V_full_n and res_stream_V_data_4_V_full_n and res_stream_V_data_3_V_full_n and res_stream_V_data_2_V_full_n and res_stream_V_data_1_V_full_n and res_stream_V_data_15_V_full_n and res_stream_V_data_14_V_full_n and res_stream_V_data_13_V_full_n and res_stream_V_data_12_V_full_n and res_stream_V_data_11_V_full_n and res_stream_V_data_10_V_full_n and res_stream_V_data_0_V_full_n);

    res_stream_V_data_0_V1_update_assign_proc : process(ap_CS_fsm_state14, res_stream_V_data_0_V1_status)
    begin
        if (((res_stream_V_data_0_V1_status = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            res_stream_V_data_0_V1_update <= ap_const_logic_1;
        else 
            res_stream_V_data_0_V1_update <= ap_const_logic_0;
        end if; 
    end process;


    res_stream_V_data_0_V_blk_n_assign_proc : process(res_stream_V_data_0_V_full_n, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            res_stream_V_data_0_V_blk_n <= res_stream_V_data_0_V_full_n;
        else 
            res_stream_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_0_V_din <= tmp_data_0_V_reg_932;
    res_stream_V_data_0_V_write <= res_stream_V_data_0_V1_update;

    res_stream_V_data_10_V_blk_n_assign_proc : process(res_stream_V_data_10_V_full_n, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            res_stream_V_data_10_V_blk_n <= res_stream_V_data_10_V_full_n;
        else 
            res_stream_V_data_10_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_10_V_din <= tmp_data_10_V_reg_982;
    res_stream_V_data_10_V_write <= res_stream_V_data_0_V1_update;

    res_stream_V_data_11_V_blk_n_assign_proc : process(res_stream_V_data_11_V_full_n, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            res_stream_V_data_11_V_blk_n <= res_stream_V_data_11_V_full_n;
        else 
            res_stream_V_data_11_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_11_V_din <= tmp_data_11_V_reg_987;
    res_stream_V_data_11_V_write <= res_stream_V_data_0_V1_update;

    res_stream_V_data_12_V_blk_n_assign_proc : process(res_stream_V_data_12_V_full_n, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            res_stream_V_data_12_V_blk_n <= res_stream_V_data_12_V_full_n;
        else 
            res_stream_V_data_12_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_12_V_din <= tmp_data_12_V_reg_992;
    res_stream_V_data_12_V_write <= res_stream_V_data_0_V1_update;

    res_stream_V_data_13_V_blk_n_assign_proc : process(res_stream_V_data_13_V_full_n, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            res_stream_V_data_13_V_blk_n <= res_stream_V_data_13_V_full_n;
        else 
            res_stream_V_data_13_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_13_V_din <= tmp_data_13_V_reg_997;
    res_stream_V_data_13_V_write <= res_stream_V_data_0_V1_update;

    res_stream_V_data_14_V_blk_n_assign_proc : process(res_stream_V_data_14_V_full_n, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            res_stream_V_data_14_V_blk_n <= res_stream_V_data_14_V_full_n;
        else 
            res_stream_V_data_14_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_14_V_din <= tmp_data_14_V_reg_1002;
    res_stream_V_data_14_V_write <= res_stream_V_data_0_V1_update;

    res_stream_V_data_15_V_blk_n_assign_proc : process(res_stream_V_data_15_V_full_n, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            res_stream_V_data_15_V_blk_n <= res_stream_V_data_15_V_full_n;
        else 
            res_stream_V_data_15_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_15_V_din <= tmp_data_15_V_reg_1007;
    res_stream_V_data_15_V_write <= res_stream_V_data_0_V1_update;

    res_stream_V_data_1_V_blk_n_assign_proc : process(res_stream_V_data_1_V_full_n, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            res_stream_V_data_1_V_blk_n <= res_stream_V_data_1_V_full_n;
        else 
            res_stream_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_1_V_din <= tmp_data_1_V_reg_937;
    res_stream_V_data_1_V_write <= res_stream_V_data_0_V1_update;

    res_stream_V_data_2_V_blk_n_assign_proc : process(res_stream_V_data_2_V_full_n, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            res_stream_V_data_2_V_blk_n <= res_stream_V_data_2_V_full_n;
        else 
            res_stream_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_2_V_din <= tmp_data_2_V_reg_942;
    res_stream_V_data_2_V_write <= res_stream_V_data_0_V1_update;

    res_stream_V_data_3_V_blk_n_assign_proc : process(res_stream_V_data_3_V_full_n, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            res_stream_V_data_3_V_blk_n <= res_stream_V_data_3_V_full_n;
        else 
            res_stream_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_3_V_din <= tmp_data_3_V_reg_947;
    res_stream_V_data_3_V_write <= res_stream_V_data_0_V1_update;

    res_stream_V_data_4_V_blk_n_assign_proc : process(res_stream_V_data_4_V_full_n, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            res_stream_V_data_4_V_blk_n <= res_stream_V_data_4_V_full_n;
        else 
            res_stream_V_data_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_4_V_din <= tmp_data_4_V_reg_952;
    res_stream_V_data_4_V_write <= res_stream_V_data_0_V1_update;

    res_stream_V_data_5_V_blk_n_assign_proc : process(res_stream_V_data_5_V_full_n, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            res_stream_V_data_5_V_blk_n <= res_stream_V_data_5_V_full_n;
        else 
            res_stream_V_data_5_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_5_V_din <= tmp_data_5_V_reg_957;
    res_stream_V_data_5_V_write <= res_stream_V_data_0_V1_update;

    res_stream_V_data_6_V_blk_n_assign_proc : process(res_stream_V_data_6_V_full_n, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            res_stream_V_data_6_V_blk_n <= res_stream_V_data_6_V_full_n;
        else 
            res_stream_V_data_6_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_6_V_din <= tmp_data_6_V_reg_962;
    res_stream_V_data_6_V_write <= res_stream_V_data_0_V1_update;

    res_stream_V_data_7_V_blk_n_assign_proc : process(res_stream_V_data_7_V_full_n, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            res_stream_V_data_7_V_blk_n <= res_stream_V_data_7_V_full_n;
        else 
            res_stream_V_data_7_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_7_V_din <= tmp_data_7_V_reg_967;
    res_stream_V_data_7_V_write <= res_stream_V_data_0_V1_update;

    res_stream_V_data_8_V_blk_n_assign_proc : process(res_stream_V_data_8_V_full_n, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            res_stream_V_data_8_V_blk_n <= res_stream_V_data_8_V_full_n;
        else 
            res_stream_V_data_8_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_8_V_din <= tmp_data_8_V_reg_972;
    res_stream_V_data_8_V_write <= res_stream_V_data_0_V1_update;

    res_stream_V_data_9_V_blk_n_assign_proc : process(res_stream_V_data_9_V_full_n, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            res_stream_V_data_9_V_blk_n <= res_stream_V_data_9_V_full_n;
        else 
            res_stream_V_data_9_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_stream_V_data_9_V_din <= tmp_data_9_V_reg_977;
    res_stream_V_data_9_V_write <= res_stream_V_data_0_V1_update;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_346_122_t_fu_659_p2 <= (tmp_s_fu_647_p2 or ap_const_lv4_1);
    tmp_456_fu_625_p1 <= i_in_reg_574(1 - 1 downto 0);
    tmp_457_fu_637_p2 <= std_logic_vector(shift_left(unsigned(i_in_reg_574),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    tmp_fu_613_p2 <= "1" when (i_in_reg_574 = ap_const_lv2_2) else "0";
    tmp_s_fu_647_p2 <= std_logic_vector(unsigned(p_shl_fu_629_p3) - unsigned(p_shl19_cast_fu_643_p1));
end behav;
