-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_6u_config13_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_V_data_0_V_empty_n : IN STD_LOGIC;
    data_V_data_0_V_read : OUT STD_LOGIC;
    data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_V_data_1_V_empty_n : IN STD_LOGIC;
    data_V_data_1_V_read : OUT STD_LOGIC;
    data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_V_data_2_V_empty_n : IN STD_LOGIC;
    data_V_data_2_V_read : OUT STD_LOGIC;
    data_V_data_3_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_V_data_3_V_empty_n : IN STD_LOGIC;
    data_V_data_3_V_read : OUT STD_LOGIC;
    data_V_data_4_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_V_data_4_V_empty_n : IN STD_LOGIC;
    data_V_data_4_V_read : OUT STD_LOGIC;
    data_V_data_5_V_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    data_V_data_5_V_empty_n : IN STD_LOGIC;
    data_V_data_5_V_read : OUT STD_LOGIC;
    res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_0_V_full_n : IN STD_LOGIC;
    res_V_data_0_V_write : OUT STD_LOGIC;
    res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_1_V_full_n : IN STD_LOGIC;
    res_V_data_1_V_write : OUT STD_LOGIC;
    res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_2_V_full_n : IN STD_LOGIC;
    res_V_data_2_V_write : OUT STD_LOGIC;
    res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_3_V_full_n : IN STD_LOGIC;
    res_V_data_3_V_write : OUT STD_LOGIC;
    res_V_data_4_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_4_V_full_n : IN STD_LOGIC;
    res_V_data_4_V_write : OUT STD_LOGIC;
    res_V_data_5_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_5_V_full_n : IN STD_LOGIC;
    res_V_data_5_V_write : OUT STD_LOGIC );
end;


architecture behav of pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_6u_config13_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal pX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_5_6 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_5_7 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_5_8 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_5_9 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_5_10 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_5_11 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_5_18 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_5_19 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_5_20 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_5_21 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_5_22 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal kernel_data_V_5_23 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal line_buffer_Array_V_5_0_0_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_5_0_0_we0 : STD_LOGIC;
    signal line_buffer_Array_V_5_0_0_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal line_buffer_Array_V_5_0_1_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_5_0_1_we0 : STD_LOGIC;
    signal line_buffer_Array_V_5_0_1_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal line_buffer_Array_V_5_0_2_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_5_0_2_we0 : STD_LOGIC;
    signal line_buffer_Array_V_5_0_2_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal line_buffer_Array_V_5_0_3_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_5_0_3_we0 : STD_LOGIC;
    signal line_buffer_Array_V_5_0_3_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal line_buffer_Array_V_5_0_4_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_5_0_4_we0 : STD_LOGIC;
    signal line_buffer_Array_V_5_0_4_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal line_buffer_Array_V_5_0_5_ce0 : STD_LOGIC;
    signal line_buffer_Array_V_5_0_5_we0 : STD_LOGIC;
    signal line_buffer_Array_V_5_0_5_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal exitcond_flatten_reg_1333 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_data_1_V_blk_n : STD_LOGIC;
    signal data_V_data_2_V_blk_n : STD_LOGIC;
    signal data_V_data_3_V_blk_n : STD_LOGIC;
    signal data_V_data_4_V_blk_n : STD_LOGIC;
    signal data_V_data_5_V_blk_n : STD_LOGIC;
    signal res_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal or_cond33_i_i_reg_1414 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_1_V_blk_n : STD_LOGIC;
    signal res_V_data_2_V_blk_n : STD_LOGIC;
    signal res_V_data_3_V_blk_n : STD_LOGIC;
    signal res_V_data_4_V_blk_n : STD_LOGIC;
    signal res_V_data_5_V_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_314 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal res_V_data_0_V1_status : STD_LOGIC;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten_reg_1333_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_342_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_next_reg_1337 : STD_LOGIC_VECTOR (3 downto 0);
    signal shift_buffer_1_0_V_reg_1342 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_data_0_V0_status : STD_LOGIC;
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal shift_buffer_1_1_V_reg_1348 : STD_LOGIC_VECTOR (5 downto 0);
    signal shift_buffer_1_2_V_reg_1354 : STD_LOGIC_VECTOR (5 downto 0);
    signal shift_buffer_1_3_V_reg_1360 : STD_LOGIC_VECTOR (5 downto 0);
    signal shift_buffer_1_4_V_reg_1366 : STD_LOGIC_VECTOR (5 downto 0);
    signal shift_buffer_1_5_V_reg_1372 : STD_LOGIC_VECTOR (5 downto 0);
    signal DataOut_V_45_reg_1378 : STD_LOGIC_VECTOR (5 downto 0);
    signal DataOut_V_46_reg_1384 : STD_LOGIC_VECTOR (5 downto 0);
    signal DataOut_V_47_reg_1390 : STD_LOGIC_VECTOR (5 downto 0);
    signal DataOut_V_48_reg_1396 : STD_LOGIC_VECTOR (5 downto 0);
    signal DataOut_V_49_reg_1402 : STD_LOGIC_VECTOR (5 downto 0);
    signal DataOut_V_reg_1408 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_cond33_i_i_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pool_window_0_V_1_fu_598_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_0_V_1_reg_1418 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_1_V_1_fu_606_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_1_V_1_reg_1423 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_2_V_1_fu_613_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_2_V_1_reg_1428 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_3_V_1_fu_621_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_3_V_1_reg_1433 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_25_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_reg_1438 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_1443 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_1448 : STD_LOGIC_VECTOR (0 downto 0);
    signal pool_window_0_V_2_fu_662_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_0_V_2_reg_1453 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_1_V_2_fu_670_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_1_V_2_reg_1458 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_2_V_2_fu_677_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_2_V_2_reg_1463 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_3_V_2_fu_685_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_3_V_2_reg_1468 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_144_1_fu_692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_144_1_reg_1473 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_145_1_fu_706_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_145_1_reg_1478 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_146_1_fu_720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_146_1_reg_1483 : STD_LOGIC_VECTOR (0 downto 0);
    signal pool_window_0_V_3_fu_726_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_0_V_3_reg_1488 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_1_V_3_fu_734_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_1_V_3_reg_1493 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_2_V_3_fu_741_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_2_V_3_reg_1498 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_3_V_3_fu_749_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_3_V_3_reg_1503 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_144_2_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_144_2_reg_1508 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_145_2_fu_770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_145_2_reg_1513 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_146_2_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_146_2_reg_1518 : STD_LOGIC_VECTOR (0 downto 0);
    signal pool_window_0_V_4_fu_790_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_0_V_4_reg_1523 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_1_V_4_fu_798_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_1_V_4_reg_1528 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_2_V_4_fu_805_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_2_V_4_reg_1533 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_3_V_4_fu_813_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_3_V_4_reg_1538 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_144_3_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_144_3_reg_1543 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_145_3_fu_834_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_145_3_reg_1548 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_146_3_fu_848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_146_3_reg_1553 : STD_LOGIC_VECTOR (0 downto 0);
    signal pool_window_0_V_5_fu_854_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_0_V_5_reg_1558 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_1_V_5_fu_862_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_1_V_5_reg_1563 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_2_V_5_fu_869_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_2_V_5_reg_1568 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_3_V_5_fu_877_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_3_V_5_reg_1573 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_144_4_fu_884_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_144_4_reg_1578 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_145_4_fu_898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_145_4_reg_1583 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_146_4_fu_912_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_146_4_reg_1588 : STD_LOGIC_VECTOR (0 downto 0);
    signal pool_window_0_V_6_fu_918_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_0_V_6_reg_1593 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_1_V_6_fu_926_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_1_V_6_reg_1598 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_2_V_6_fu_933_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_2_V_6_reg_1603 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_3_V_6_fu_941_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal pool_window_3_V_6_reg_1608 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_144_5_fu_948_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_144_5_reg_1613 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_145_5_fu_962_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_145_5_reg_1618 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_146_5_fu_976_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_146_5_reg_1623 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_982_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_reg_1628 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_in_i_i_fu_1006_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_in_i_i_reg_1632 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_1026_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_1637 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_in28_i_i_fu_1050_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_in28_i_i_reg_1641 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_0_V_fu_1093_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_0_V_reg_1646 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_1_V_fu_1136_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_1_V_reg_1651 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_2_V_fu_1179_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_2_V_reg_1656 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_3_V_fu_1222_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_3_V_reg_1661 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_4_V_fu_1265_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_4_V_reg_1666 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_5_V_fu_1308_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_5_V_reg_1671 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_318_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_storemerge_i_i_phi_fu_329_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge_i_i_reg_325 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_storemerge_i_i_reg_325 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_data_0_V0_update : STD_LOGIC;
    signal res_V_data_0_V1_update : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_22_fu_988_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_1032_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_phi1_fu_634_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_phi2_fu_648_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_phi3_fu_698_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_phi4_fu_712_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_phi5_fu_762_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_phi6_fu_776_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_phi7_fu_826_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_phi8_fu_840_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_phi9_fu_890_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_phi10_fu_904_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_phi11_fu_954_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_phi_fu_968_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal phitmp_i_i_fu_1000_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal phitmp39_i_i_fu_1044_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_1076_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_29_fu_1083_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_data_0_V_fu_1093_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_0_V_fu_1093_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_0_V_fu_1093_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_0_V_fu_1093_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_0_V_fu_1093_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_31_fu_1119_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_32_fu_1126_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_data_1_V_fu_1136_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_1_V_fu_1136_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_1_V_fu_1136_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_1_V_fu_1136_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_1_V_fu_1136_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_34_fu_1162_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_35_fu_1169_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_data_2_V_fu_1179_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_2_V_fu_1179_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_2_V_fu_1179_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_2_V_fu_1179_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_2_V_fu_1179_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_37_fu_1205_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_38_fu_1212_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_data_3_V_fu_1222_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_3_V_fu_1222_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_3_V_fu_1222_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_3_V_fu_1222_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_3_V_fu_1222_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_40_fu_1248_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_41_fu_1255_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_data_4_V_fu_1265_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_4_V_fu_1265_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_4_V_fu_1265_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_4_V_fu_1265_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_4_V_fu_1265_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_43_fu_1291_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_44_fu_1298_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_data_5_V_fu_1308_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_5_V_fu_1308_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_5_V_fu_1308_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_5_V_fu_1308_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_5_V_fu_1308_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_397 : BOOLEAN;
    signal ap_condition_1017 : BOOLEAN;
    signal ap_condition_353 : BOOLEAN;
    signal ap_condition_1022 : BOOLEAN;

    component materials_net_mux_42_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_6u_config13_s_line_buffer_Array_Bew IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (5 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    line_buffer_Array_V_5_0_0_U : component pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_6u_config13_s_line_buffer_Array_Bew
    generic map (
        DataWidth => 6,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv2_3,
        ce0 => line_buffer_Array_V_5_0_0_ce0,
        we0 => line_buffer_Array_V_5_0_0_we0,
        d0 => data_V_data_0_V_dout,
        q0 => line_buffer_Array_V_5_0_0_q0);

    line_buffer_Array_V_5_0_1_U : component pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_6u_config13_s_line_buffer_Array_Bew
    generic map (
        DataWidth => 6,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv2_3,
        ce0 => line_buffer_Array_V_5_0_1_ce0,
        we0 => line_buffer_Array_V_5_0_1_we0,
        d0 => data_V_data_1_V_dout,
        q0 => line_buffer_Array_V_5_0_1_q0);

    line_buffer_Array_V_5_0_2_U : component pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_6u_config13_s_line_buffer_Array_Bew
    generic map (
        DataWidth => 6,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv2_3,
        ce0 => line_buffer_Array_V_5_0_2_ce0,
        we0 => line_buffer_Array_V_5_0_2_we0,
        d0 => data_V_data_2_V_dout,
        q0 => line_buffer_Array_V_5_0_2_q0);

    line_buffer_Array_V_5_0_3_U : component pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_6u_config13_s_line_buffer_Array_Bew
    generic map (
        DataWidth => 6,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv2_3,
        ce0 => line_buffer_Array_V_5_0_3_ce0,
        we0 => line_buffer_Array_V_5_0_3_we0,
        d0 => data_V_data_3_V_dout,
        q0 => line_buffer_Array_V_5_0_3_q0);

    line_buffer_Array_V_5_0_4_U : component pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_6u_config13_s_line_buffer_Array_Bew
    generic map (
        DataWidth => 6,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv2_3,
        ce0 => line_buffer_Array_V_5_0_4_ce0,
        we0 => line_buffer_Array_V_5_0_4_we0,
        d0 => data_V_data_4_V_dout,
        q0 => line_buffer_Array_V_5_0_4_q0);

    line_buffer_Array_V_5_0_5_U : component pooling2d_cl_array_array_ap_fixed_16_6_5_3_0_6u_config13_s_line_buffer_Array_Bew
    generic map (
        DataWidth => 6,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv2_3,
        ce0 => line_buffer_Array_V_5_0_5_ce0,
        we0 => line_buffer_Array_V_5_0_5_we0,
        d0 => data_V_data_5_V_dout,
        q0 => line_buffer_Array_V_5_0_5_q0);

    materials_net_mux_42_16_1_1_U301 : component materials_net_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_data_0_V_fu_1093_p1,
        din1 => tmp_data_0_V_fu_1093_p2,
        din2 => tmp_data_0_V_fu_1093_p3,
        din3 => tmp_data_0_V_fu_1093_p4,
        din4 => tmp_data_0_V_fu_1093_p5,
        dout => tmp_data_0_V_fu_1093_p6);

    materials_net_mux_42_16_1_1_U302 : component materials_net_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_data_1_V_fu_1136_p1,
        din1 => tmp_data_1_V_fu_1136_p2,
        din2 => tmp_data_1_V_fu_1136_p3,
        din3 => tmp_data_1_V_fu_1136_p4,
        din4 => tmp_data_1_V_fu_1136_p5,
        dout => tmp_data_1_V_fu_1136_p6);

    materials_net_mux_42_16_1_1_U303 : component materials_net_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_data_2_V_fu_1179_p1,
        din1 => tmp_data_2_V_fu_1179_p2,
        din2 => tmp_data_2_V_fu_1179_p3,
        din3 => tmp_data_2_V_fu_1179_p4,
        din4 => tmp_data_2_V_fu_1179_p5,
        dout => tmp_data_2_V_fu_1179_p6);

    materials_net_mux_42_16_1_1_U304 : component materials_net_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_data_3_V_fu_1222_p1,
        din1 => tmp_data_3_V_fu_1222_p2,
        din2 => tmp_data_3_V_fu_1222_p3,
        din3 => tmp_data_3_V_fu_1222_p4,
        din4 => tmp_data_3_V_fu_1222_p5,
        dout => tmp_data_3_V_fu_1222_p6);

    materials_net_mux_42_16_1_1_U305 : component materials_net_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_data_4_V_fu_1265_p1,
        din1 => tmp_data_4_V_fu_1265_p2,
        din2 => tmp_data_4_V_fu_1265_p3,
        din3 => tmp_data_4_V_fu_1265_p4,
        din4 => tmp_data_4_V_fu_1265_p5,
        dout => tmp_data_4_V_fu_1265_p6);

    materials_net_mux_42_16_1_1_U306 : component materials_net_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_data_5_V_fu_1308_p1,
        din1 => tmp_data_5_V_fu_1308_p2,
        din2 => tmp_data_5_V_fu_1308_p3,
        din3 => tmp_data_5_V_fu_1308_p4,
        din4 => tmp_data_5_V_fu_1308_p5,
        dout => tmp_data_5_V_fu_1308_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_storemerge_i_i_reg_325_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_21_fu_1026_p2 = ap_const_lv1_1) and (tmp_20_fu_982_p2 = ap_const_lv1_1) and (exitcond_flatten_reg_1333 = ap_const_lv1_0))) then 
                ap_phi_reg_pp0_iter1_storemerge_i_i_reg_325 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_phi_reg_pp0_iter1_storemerge_i_i_reg_325 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_325;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1333 = ap_const_lv1_0))) then 
                indvar_flatten_reg_314 <= indvar_flatten_next_reg_1337;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_314 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    pX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_397)) then
                if ((tmp_20_fu_982_p2 = ap_const_lv1_1)) then 
                    pX <= ap_const_lv32_0;
                elsif ((tmp_20_fu_982_p2 = ap_const_lv1_0)) then 
                    pX <= tmp_22_fu_988_p2;
                end if;
            end if; 
        end if;
    end process;

    pY_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_1017)) then
                if ((tmp_21_fu_1026_p2 = ap_const_lv1_1)) then 
                    pY <= ap_const_lv32_0;
                elsif ((tmp_21_fu_1026_p2 = ap_const_lv1_0)) then 
                    pY <= tmp_23_fu_1032_p2;
                end if;
            end if; 
        end if;
    end process;

    sX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_1022)) then 
                    sX <= p_in_i_i_reg_1632;
                elsif ((ap_const_boolean_1 = ap_condition_353)) then 
                    sX <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_1333 = ap_const_lv1_0))) then
                DataOut_V_45_reg_1378 <= line_buffer_Array_V_5_0_0_q0;
                DataOut_V_46_reg_1384 <= line_buffer_Array_V_5_0_1_q0;
                DataOut_V_47_reg_1390 <= line_buffer_Array_V_5_0_2_q0;
                DataOut_V_48_reg_1396 <= line_buffer_Array_V_5_0_3_q0;
                DataOut_V_49_reg_1402 <= line_buffer_Array_V_5_0_4_q0;
                DataOut_V_reg_1408 <= line_buffer_Array_V_5_0_5_q0;
                shift_buffer_1_0_V_reg_1342 <= data_V_data_0_V_dout;
                shift_buffer_1_1_V_reg_1348 <= data_V_data_1_V_dout;
                shift_buffer_1_2_V_reg_1354 <= data_V_data_2_V_dout;
                shift_buffer_1_3_V_reg_1360 <= data_V_data_3_V_dout;
                shift_buffer_1_4_V_reg_1366 <= data_V_data_4_V_dout;
                shift_buffer_1_5_V_reg_1372 <= data_V_data_5_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_flatten_reg_1333 <= exitcond_flatten_fu_336_p2;
                exitcond_flatten_reg_1333_pp0_iter1_reg <= exitcond_flatten_reg_1333;
                tmp_20_reg_1628 <= tmp_20_fu_982_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                indvar_flatten_next_reg_1337 <= indvar_flatten_next_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1333 = ap_const_lv1_0))) then
                kernel_data_V_5_10 <= DataOut_V_49_reg_1402;
                kernel_data_V_5_11 <= DataOut_V_reg_1408;
                kernel_data_V_5_18 <= shift_buffer_1_0_V_reg_1342;
                kernel_data_V_5_19 <= shift_buffer_1_1_V_reg_1348;
                kernel_data_V_5_20 <= shift_buffer_1_2_V_reg_1354;
                kernel_data_V_5_21 <= shift_buffer_1_3_V_reg_1360;
                kernel_data_V_5_22 <= shift_buffer_1_4_V_reg_1366;
                kernel_data_V_5_23 <= shift_buffer_1_5_V_reg_1372;
                kernel_data_V_5_6 <= DataOut_V_45_reg_1378;
                kernel_data_V_5_7 <= DataOut_V_46_reg_1384;
                kernel_data_V_5_8 <= DataOut_V_47_reg_1390;
                kernel_data_V_5_9 <= DataOut_V_48_reg_1396;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_1333 = ap_const_lv1_0))) then
                or_cond33_i_i_reg_1414 <= or_cond33_i_i_fu_592_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_20_fu_982_p2 = ap_const_lv1_1) and (tmp_21_fu_1026_p2 = ap_const_lv1_0) and (exitcond_flatten_reg_1333 = ap_const_lv1_0))) then
                p_in28_i_i_reg_1641 <= p_in28_i_i_fu_1050_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_20_fu_982_p2 = ap_const_lv1_0))) then
                p_in_i_i_reg_1632 <= p_in_i_i_fu_1006_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_cond33_i_i_fu_592_p2 = ap_const_lv1_1))) then
                    pool_window_0_V_1_reg_1418(9 downto 4) <= pool_window_0_V_1_fu_598_p3(9 downto 4);
                    pool_window_0_V_2_reg_1453(9 downto 4) <= pool_window_0_V_2_fu_662_p3(9 downto 4);
                    pool_window_0_V_3_reg_1488(9 downto 4) <= pool_window_0_V_3_fu_726_p3(9 downto 4);
                    pool_window_0_V_4_reg_1523(9 downto 4) <= pool_window_0_V_4_fu_790_p3(9 downto 4);
                    pool_window_0_V_5_reg_1558(9 downto 4) <= pool_window_0_V_5_fu_854_p3(9 downto 4);
                    pool_window_0_V_6_reg_1593(9 downto 4) <= pool_window_0_V_6_fu_918_p3(9 downto 4);
                    pool_window_1_V_1_reg_1423(9 downto 4) <= pool_window_1_V_1_fu_606_p3(9 downto 4);
                    pool_window_1_V_2_reg_1458(9 downto 4) <= pool_window_1_V_2_fu_670_p3(9 downto 4);
                    pool_window_1_V_3_reg_1493(9 downto 4) <= pool_window_1_V_3_fu_734_p3(9 downto 4);
                    pool_window_1_V_4_reg_1528(9 downto 4) <= pool_window_1_V_4_fu_798_p3(9 downto 4);
                    pool_window_1_V_5_reg_1563(9 downto 4) <= pool_window_1_V_5_fu_862_p3(9 downto 4);
                    pool_window_1_V_6_reg_1598(9 downto 4) <= pool_window_1_V_6_fu_926_p3(9 downto 4);
                    pool_window_2_V_1_reg_1428(9 downto 4) <= pool_window_2_V_1_fu_613_p3(9 downto 4);
                    pool_window_2_V_2_reg_1463(9 downto 4) <= pool_window_2_V_2_fu_677_p3(9 downto 4);
                    pool_window_2_V_3_reg_1498(9 downto 4) <= pool_window_2_V_3_fu_741_p3(9 downto 4);
                    pool_window_2_V_4_reg_1533(9 downto 4) <= pool_window_2_V_4_fu_805_p3(9 downto 4);
                    pool_window_2_V_5_reg_1568(9 downto 4) <= pool_window_2_V_5_fu_869_p3(9 downto 4);
                    pool_window_2_V_6_reg_1603(9 downto 4) <= pool_window_2_V_6_fu_933_p3(9 downto 4);
                    pool_window_3_V_1_reg_1433(9 downto 4) <= pool_window_3_V_1_fu_621_p3(9 downto 4);
                    pool_window_3_V_2_reg_1468(9 downto 4) <= pool_window_3_V_2_fu_685_p3(9 downto 4);
                    pool_window_3_V_3_reg_1503(9 downto 4) <= pool_window_3_V_3_fu_749_p3(9 downto 4);
                    pool_window_3_V_4_reg_1538(9 downto 4) <= pool_window_3_V_4_fu_813_p3(9 downto 4);
                    pool_window_3_V_5_reg_1573(9 downto 4) <= pool_window_3_V_5_fu_877_p3(9 downto 4);
                    pool_window_3_V_6_reg_1608(9 downto 4) <= pool_window_3_V_6_fu_941_p3(9 downto 4);
                tmp_144_1_reg_1473 <= tmp_144_1_fu_692_p2;
                tmp_144_2_reg_1508 <= tmp_144_2_fu_756_p2;
                tmp_144_3_reg_1543 <= tmp_144_3_fu_820_p2;
                tmp_144_4_reg_1578 <= tmp_144_4_fu_884_p2;
                tmp_144_5_reg_1613 <= tmp_144_5_fu_948_p2;
                tmp_145_1_reg_1478 <= tmp_145_1_fu_706_p2;
                tmp_145_2_reg_1513 <= tmp_145_2_fu_770_p2;
                tmp_145_3_reg_1548 <= tmp_145_3_fu_834_p2;
                tmp_145_4_reg_1583 <= tmp_145_4_fu_898_p2;
                tmp_145_5_reg_1618 <= tmp_145_5_fu_962_p2;
                tmp_146_1_reg_1483 <= tmp_146_1_fu_720_p2;
                tmp_146_2_reg_1518 <= tmp_146_2_fu_784_p2;
                tmp_146_3_reg_1553 <= tmp_146_3_fu_848_p2;
                tmp_146_4_reg_1588 <= tmp_146_4_fu_912_p2;
                tmp_146_5_reg_1623 <= tmp_146_5_fu_976_p2;
                tmp_25_reg_1438 <= tmp_25_fu_628_p2;
                tmp_26_reg_1443 <= tmp_26_fu_642_p2;
                tmp_28_reg_1448 <= tmp_28_fu_656_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_20_reg_1628 = ap_const_lv1_1))) then
                sY <= ap_phi_mux_storemerge_i_i_phi_fu_329_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_20_fu_982_p2 = ap_const_lv1_1))) then
                tmp_21_reg_1637 <= tmp_21_fu_1026_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (or_cond33_i_i_reg_1414 = ap_const_lv1_1))) then
                tmp_data_0_V_reg_1646 <= tmp_data_0_V_fu_1093_p6;
                tmp_data_1_V_reg_1651 <= tmp_data_1_V_fu_1136_p6;
                tmp_data_2_V_reg_1656 <= tmp_data_2_V_fu_1179_p6;
                tmp_data_3_V_reg_1661 <= tmp_data_3_V_fu_1222_p6;
                tmp_data_4_V_reg_1666 <= tmp_data_4_V_fu_1265_p6;
                tmp_data_5_V_reg_1671 <= tmp_data_5_V_fu_1308_p6;
            end if;
        end if;
    end process;
    pool_window_0_V_1_reg_1418(3 downto 0) <= "0000";
    pool_window_1_V_1_reg_1423(3 downto 0) <= "0000";
    pool_window_2_V_1_reg_1428(3 downto 0) <= "0000";
    pool_window_3_V_1_reg_1433(3 downto 0) <= "0000";
    pool_window_0_V_2_reg_1453(3 downto 0) <= "0000";
    pool_window_1_V_2_reg_1458(3 downto 0) <= "0000";
    pool_window_2_V_2_reg_1463(3 downto 0) <= "0000";
    pool_window_3_V_2_reg_1468(3 downto 0) <= "0000";
    pool_window_0_V_3_reg_1488(3 downto 0) <= "0000";
    pool_window_1_V_3_reg_1493(3 downto 0) <= "0000";
    pool_window_2_V_3_reg_1498(3 downto 0) <= "0000";
    pool_window_3_V_3_reg_1503(3 downto 0) <= "0000";
    pool_window_0_V_4_reg_1523(3 downto 0) <= "0000";
    pool_window_1_V_4_reg_1528(3 downto 0) <= "0000";
    pool_window_2_V_4_reg_1533(3 downto 0) <= "0000";
    pool_window_3_V_4_reg_1538(3 downto 0) <= "0000";
    pool_window_0_V_5_reg_1558(3 downto 0) <= "0000";
    pool_window_1_V_5_reg_1563(3 downto 0) <= "0000";
    pool_window_2_V_5_reg_1568(3 downto 0) <= "0000";
    pool_window_3_V_5_reg_1573(3 downto 0) <= "0000";
    pool_window_0_V_6_reg_1593(3 downto 0) <= "0000";
    pool_window_1_V_6_reg_1598(3 downto 0) <= "0000";
    pool_window_2_V_6_reg_1603(3 downto 0) <= "0000";
    pool_window_3_V_6_reg_1608(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, exitcond_flatten_fu_336_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_fu_336_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_fu_336_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, or_cond33_i_i_reg_1414, res_V_data_0_V1_status)
    begin
                ap_block_pp0_stage0_01001 <= ((res_V_data_0_V1_status = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (or_cond33_i_i_reg_1414 = ap_const_lv1_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, or_cond33_i_i_reg_1414, res_V_data_0_V1_status)
    begin
                ap_block_pp0_stage0_11001 <= ((res_V_data_0_V1_status = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (or_cond33_i_i_reg_1414 = ap_const_lv1_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, or_cond33_i_i_reg_1414, res_V_data_0_V1_status)
    begin
                ap_block_pp0_stage0_subdone <= ((res_V_data_0_V1_status = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (or_cond33_i_i_reg_1414 = ap_const_lv1_1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, exitcond_flatten_reg_1333, data_V_data_0_V0_status)
    begin
                ap_block_pp0_stage1_11001 <= ((data_V_data_0_V0_status = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_reg_1333 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, exitcond_flatten_reg_1333, data_V_data_0_V0_status)
    begin
                ap_block_pp0_stage1_subdone <= ((data_V_data_0_V0_status = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_reg_1333 = ap_const_lv1_0));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage1_iter0_assign_proc : process(exitcond_flatten_reg_1333, data_V_data_0_V0_status)
    begin
                ap_block_state3_pp0_stage1_iter0 <= ((data_V_data_0_V0_status = ap_const_logic_0) and (exitcond_flatten_reg_1333 = ap_const_lv1_0));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter2_assign_proc : process(or_cond33_i_i_reg_1414, res_V_data_0_V1_status)
    begin
                ap_block_state6_pp0_stage0_iter2 <= ((res_V_data_0_V1_status = ap_const_logic_0) and (or_cond33_i_i_reg_1414 = ap_const_lv1_1));
    end process;


    ap_condition_1017_assign_proc : process(exitcond_flatten_reg_1333, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_20_fu_982_p2, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_1017 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_20_fu_982_p2 = ap_const_lv1_1) and (exitcond_flatten_reg_1333 = ap_const_lv1_0));
    end process;


    ap_condition_1022_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, tmp_20_reg_1628)
    begin
                ap_condition_1022 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_20_reg_1628 = ap_const_lv1_0));
    end process;


    ap_condition_353_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_20_fu_982_p2)
    begin
                ap_condition_353 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_20_fu_982_p2 = ap_const_lv1_1));
    end process;


    ap_condition_397_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_397 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_336_p2)
    begin
        if ((exitcond_flatten_fu_336_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_318_p4_assign_proc : process(exitcond_flatten_reg_1333, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, indvar_flatten_reg_314, indvar_flatten_next_reg_1337, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond_flatten_reg_1333 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_318_p4 <= indvar_flatten_next_reg_1337;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_318_p4 <= indvar_flatten_reg_314;
        end if; 
    end process;


    ap_phi_mux_storemerge_i_i_phi_fu_329_p4_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, exitcond_flatten_reg_1333_pp0_iter1_reg, tmp_20_reg_1628, tmp_21_reg_1637, p_in28_i_i_reg_1641, ap_enable_reg_pp0_iter1, ap_phi_reg_pp0_iter1_storemerge_i_i_reg_325)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_20_reg_1628 = ap_const_lv1_1) and (tmp_21_reg_1637 = ap_const_lv1_0) and (exitcond_flatten_reg_1333_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            ap_phi_mux_storemerge_i_i_phi_fu_329_p4 <= p_in28_i_i_reg_1641;
        else 
            ap_phi_mux_storemerge_i_i_phi_fu_329_p4 <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_325;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_storemerge_i_i_reg_325 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_ready <= internal_ap_ready;
    data_V_data_0_V0_status <= (data_V_data_5_V_empty_n and data_V_data_4_V_empty_n and data_V_data_3_V_empty_n and data_V_data_2_V_empty_n and data_V_data_1_V_empty_n and data_V_data_0_V_empty_n);

    data_V_data_0_V0_update_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond_flatten_reg_1333, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_1333 = ap_const_lv1_0))) then 
            data_V_data_0_V0_update <= ap_const_logic_1;
        else 
            data_V_data_0_V0_update <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_0_V_blk_n_assign_proc : process(data_V_data_0_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, exitcond_flatten_reg_1333)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_1333 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_0_V_blk_n <= data_V_data_0_V_empty_n;
        else 
            data_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_V_data_0_V_read <= data_V_data_0_V0_update;

    data_V_data_1_V_blk_n_assign_proc : process(data_V_data_1_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, exitcond_flatten_reg_1333)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_1333 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_1_V_blk_n <= data_V_data_1_V_empty_n;
        else 
            data_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_V_data_1_V_read <= data_V_data_0_V0_update;

    data_V_data_2_V_blk_n_assign_proc : process(data_V_data_2_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, exitcond_flatten_reg_1333)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_1333 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_2_V_blk_n <= data_V_data_2_V_empty_n;
        else 
            data_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_V_data_2_V_read <= data_V_data_0_V0_update;

    data_V_data_3_V_blk_n_assign_proc : process(data_V_data_3_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, exitcond_flatten_reg_1333)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_1333 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_3_V_blk_n <= data_V_data_3_V_empty_n;
        else 
            data_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_V_data_3_V_read <= data_V_data_0_V0_update;

    data_V_data_4_V_blk_n_assign_proc : process(data_V_data_4_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, exitcond_flatten_reg_1333)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_1333 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_4_V_blk_n <= data_V_data_4_V_empty_n;
        else 
            data_V_data_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_V_data_4_V_read <= data_V_data_0_V0_update;

    data_V_data_5_V_blk_n_assign_proc : process(data_V_data_5_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, exitcond_flatten_reg_1333)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_1333 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_V_data_5_V_blk_n <= data_V_data_5_V_empty_n;
        else 
            data_V_data_5_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_V_data_5_V_read <= data_V_data_0_V0_update;
    exitcond_flatten_fu_336_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_318_p4 = ap_const_lv4_C) else "0";
    indvar_flatten_next_fu_342_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_318_p4) + unsigned(ap_const_lv4_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_5_0_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond_flatten_reg_1333, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_1333 = ap_const_lv1_0))) then 
            line_buffer_Array_V_5_0_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_5_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_5_0_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond_flatten_reg_1333, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_1333 = ap_const_lv1_0))) then 
            line_buffer_Array_V_5_0_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_5_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_5_0_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond_flatten_reg_1333, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_1333 = ap_const_lv1_0))) then 
            line_buffer_Array_V_5_0_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_5_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_5_0_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond_flatten_reg_1333, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_1333 = ap_const_lv1_0))) then 
            line_buffer_Array_V_5_0_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_5_0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_5_0_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond_flatten_reg_1333, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_1333 = ap_const_lv1_0))) then 
            line_buffer_Array_V_5_0_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_5_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_5_0_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond_flatten_reg_1333, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_1333 = ap_const_lv1_0))) then 
            line_buffer_Array_V_5_0_2_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_5_0_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_5_0_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond_flatten_reg_1333, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_1333 = ap_const_lv1_0))) then 
            line_buffer_Array_V_5_0_3_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_5_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_5_0_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond_flatten_reg_1333, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_1333 = ap_const_lv1_0))) then 
            line_buffer_Array_V_5_0_3_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_5_0_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_5_0_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond_flatten_reg_1333, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_1333 = ap_const_lv1_0))) then 
            line_buffer_Array_V_5_0_4_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_5_0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_5_0_4_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond_flatten_reg_1333, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_1333 = ap_const_lv1_0))) then 
            line_buffer_Array_V_5_0_4_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_5_0_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_5_0_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond_flatten_reg_1333, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_1333 = ap_const_lv1_0))) then 
            line_buffer_Array_V_5_0_5_ce0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_5_0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_Array_V_5_0_5_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond_flatten_reg_1333, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond_flatten_reg_1333 = ap_const_lv1_0))) then 
            line_buffer_Array_V_5_0_5_we0 <= ap_const_logic_1;
        else 
            line_buffer_Array_V_5_0_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_cond33_i_i_fu_592_p2 <= (tmp2_fu_586_p2 and tmp1_fu_580_p2);
    p_in28_i_i_fu_1050_p3 <= 
        ap_const_lv32_0 when (tmp_17_fu_554_p2(0) = '1') else 
        phitmp39_i_i_fu_1044_p2;
    p_in_i_i_fu_1006_p3 <= 
        ap_const_lv32_0 when (tmp_16_fu_544_p2(0) = '1') else 
        phitmp_i_i_fu_1000_p2;
    p_phi10_fu_904_p3 <= 
        pool_window_3_V_5_fu_877_p3 when (tmp_145_4_fu_898_p2(0) = '1') else 
        pool_window_2_V_5_fu_869_p3;
    p_phi11_fu_954_p3 <= 
        pool_window_1_V_6_fu_926_p3 when (tmp_144_5_fu_948_p2(0) = '1') else 
        pool_window_0_V_6_fu_918_p3;
    p_phi1_fu_634_p3 <= 
        pool_window_1_V_1_fu_606_p3 when (tmp_25_fu_628_p2(0) = '1') else 
        pool_window_0_V_1_fu_598_p3;
    p_phi2_fu_648_p3 <= 
        pool_window_3_V_1_fu_621_p3 when (tmp_26_fu_642_p2(0) = '1') else 
        pool_window_2_V_1_fu_613_p3;
    p_phi3_fu_698_p3 <= 
        pool_window_1_V_2_fu_670_p3 when (tmp_144_1_fu_692_p2(0) = '1') else 
        pool_window_0_V_2_fu_662_p3;
    p_phi4_fu_712_p3 <= 
        pool_window_3_V_2_fu_685_p3 when (tmp_145_1_fu_706_p2(0) = '1') else 
        pool_window_2_V_2_fu_677_p3;
    p_phi5_fu_762_p3 <= 
        pool_window_1_V_3_fu_734_p3 when (tmp_144_2_fu_756_p2(0) = '1') else 
        pool_window_0_V_3_fu_726_p3;
    p_phi6_fu_776_p3 <= 
        pool_window_3_V_3_fu_749_p3 when (tmp_145_2_fu_770_p2(0) = '1') else 
        pool_window_2_V_3_fu_741_p3;
    p_phi7_fu_826_p3 <= 
        pool_window_1_V_4_fu_798_p3 when (tmp_144_3_fu_820_p2(0) = '1') else 
        pool_window_0_V_4_fu_790_p3;
    p_phi8_fu_840_p3 <= 
        pool_window_3_V_4_fu_813_p3 when (tmp_145_3_fu_834_p2(0) = '1') else 
        pool_window_2_V_4_fu_805_p3;
    p_phi9_fu_890_p3 <= 
        pool_window_1_V_5_fu_862_p3 when (tmp_144_4_fu_884_p2(0) = '1') else 
        pool_window_0_V_5_fu_854_p3;
    p_phi_fu_968_p3 <= 
        pool_window_3_V_6_fu_941_p3 when (tmp_145_5_fu_962_p2(0) = '1') else 
        pool_window_2_V_6_fu_933_p3;
    phitmp39_i_i_fu_1044_p2 <= std_logic_vector(unsigned(sY) + unsigned(ap_const_lv32_1));
    phitmp_i_i_fu_1000_p2 <= std_logic_vector(unsigned(sX) + unsigned(ap_const_lv32_1));
    pool_window_0_V_1_fu_598_p3 <= (kernel_data_V_5_6 & ap_const_lv4_0);
    pool_window_0_V_2_fu_662_p3 <= (kernel_data_V_5_7 & ap_const_lv4_0);
    pool_window_0_V_3_fu_726_p3 <= (kernel_data_V_5_8 & ap_const_lv4_0);
    pool_window_0_V_4_fu_790_p3 <= (kernel_data_V_5_9 & ap_const_lv4_0);
    pool_window_0_V_5_fu_854_p3 <= (kernel_data_V_5_10 & ap_const_lv4_0);
    pool_window_0_V_6_fu_918_p3 <= (kernel_data_V_5_11 & ap_const_lv4_0);
    pool_window_1_V_1_fu_606_p3 <= (DataOut_V_45_reg_1378 & ap_const_lv4_0);
    pool_window_1_V_2_fu_670_p3 <= (DataOut_V_46_reg_1384 & ap_const_lv4_0);
    pool_window_1_V_3_fu_734_p3 <= (DataOut_V_47_reg_1390 & ap_const_lv4_0);
    pool_window_1_V_4_fu_798_p3 <= (DataOut_V_48_reg_1396 & ap_const_lv4_0);
    pool_window_1_V_5_fu_862_p3 <= (DataOut_V_49_reg_1402 & ap_const_lv4_0);
    pool_window_1_V_6_fu_926_p3 <= (DataOut_V_reg_1408 & ap_const_lv4_0);
    pool_window_2_V_1_fu_613_p3 <= (kernel_data_V_5_18 & ap_const_lv4_0);
    pool_window_2_V_2_fu_677_p3 <= (kernel_data_V_5_19 & ap_const_lv4_0);
    pool_window_2_V_3_fu_741_p3 <= (kernel_data_V_5_20 & ap_const_lv4_0);
    pool_window_2_V_4_fu_805_p3 <= (kernel_data_V_5_21 & ap_const_lv4_0);
    pool_window_2_V_5_fu_869_p3 <= (kernel_data_V_5_22 & ap_const_lv4_0);
    pool_window_2_V_6_fu_933_p3 <= (kernel_data_V_5_23 & ap_const_lv4_0);
    pool_window_3_V_1_fu_621_p3 <= (shift_buffer_1_0_V_reg_1342 & ap_const_lv4_0);
    pool_window_3_V_2_fu_685_p3 <= (shift_buffer_1_1_V_reg_1348 & ap_const_lv4_0);
    pool_window_3_V_3_fu_749_p3 <= (shift_buffer_1_2_V_reg_1354 & ap_const_lv4_0);
    pool_window_3_V_4_fu_813_p3 <= (shift_buffer_1_3_V_reg_1360 & ap_const_lv4_0);
    pool_window_3_V_5_fu_877_p3 <= (shift_buffer_1_4_V_reg_1366 & ap_const_lv4_0);
    pool_window_3_V_6_fu_941_p3 <= (shift_buffer_1_5_V_reg_1372 & ap_const_lv4_0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    res_V_data_0_V1_status <= (res_V_data_5_V_full_n and res_V_data_4_V_full_n and res_V_data_3_V_full_n and res_V_data_2_V_full_n and res_V_data_1_V_full_n and res_V_data_0_V_full_n);

    res_V_data_0_V1_update_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, or_cond33_i_i_reg_1414, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_cond33_i_i_reg_1414 = ap_const_lv1_1))) then 
            res_V_data_0_V1_update <= ap_const_logic_1;
        else 
            res_V_data_0_V1_update <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_0_V_blk_n_assign_proc : process(res_V_data_0_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, or_cond33_i_i_reg_1414)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_cond33_i_i_reg_1414 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_0_V_blk_n <= res_V_data_0_V_full_n;
        else 
            res_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_0_V_din <= tmp_data_0_V_reg_1646;
    res_V_data_0_V_write <= res_V_data_0_V1_update;

    res_V_data_1_V_blk_n_assign_proc : process(res_V_data_1_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, or_cond33_i_i_reg_1414)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_cond33_i_i_reg_1414 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_1_V_blk_n <= res_V_data_1_V_full_n;
        else 
            res_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_1_V_din <= tmp_data_1_V_reg_1651;
    res_V_data_1_V_write <= res_V_data_0_V1_update;

    res_V_data_2_V_blk_n_assign_proc : process(res_V_data_2_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, or_cond33_i_i_reg_1414)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_cond33_i_i_reg_1414 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_2_V_blk_n <= res_V_data_2_V_full_n;
        else 
            res_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_2_V_din <= tmp_data_2_V_reg_1656;
    res_V_data_2_V_write <= res_V_data_0_V1_update;

    res_V_data_3_V_blk_n_assign_proc : process(res_V_data_3_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, or_cond33_i_i_reg_1414)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_cond33_i_i_reg_1414 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_3_V_blk_n <= res_V_data_3_V_full_n;
        else 
            res_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_3_V_din <= tmp_data_3_V_reg_1661;
    res_V_data_3_V_write <= res_V_data_0_V1_update;

    res_V_data_4_V_blk_n_assign_proc : process(res_V_data_4_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, or_cond33_i_i_reg_1414)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_cond33_i_i_reg_1414 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_4_V_blk_n <= res_V_data_4_V_full_n;
        else 
            res_V_data_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_4_V_din <= tmp_data_4_V_reg_1666;
    res_V_data_4_V_write <= res_V_data_0_V1_update;

    res_V_data_5_V_blk_n_assign_proc : process(res_V_data_5_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, or_cond33_i_i_reg_1414)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_cond33_i_i_reg_1414 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_5_V_blk_n <= res_V_data_5_V_full_n;
        else 
            res_V_data_5_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_5_V_din <= tmp_data_5_V_reg_1671;
    res_V_data_5_V_write <= res_V_data_0_V1_update;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_580_p2 <= (tmp_17_fu_554_p2 and tmp_16_fu_544_p2);
    tmp2_fu_586_p2 <= (tmp_19_fu_574_p2 and tmp_18_fu_564_p2);
    tmp_144_1_fu_692_p2 <= "1" when (unsigned(pool_window_0_V_2_fu_662_p3) < unsigned(pool_window_1_V_2_fu_670_p3)) else "0";
    tmp_144_2_fu_756_p2 <= "1" when (unsigned(pool_window_0_V_3_fu_726_p3) < unsigned(pool_window_1_V_3_fu_734_p3)) else "0";
    tmp_144_3_fu_820_p2 <= "1" when (unsigned(pool_window_0_V_4_fu_790_p3) < unsigned(pool_window_1_V_4_fu_798_p3)) else "0";
    tmp_144_4_fu_884_p2 <= "1" when (unsigned(pool_window_0_V_5_fu_854_p3) < unsigned(pool_window_1_V_5_fu_862_p3)) else "0";
    tmp_144_5_fu_948_p2 <= "1" when (unsigned(pool_window_0_V_6_fu_918_p3) < unsigned(pool_window_1_V_6_fu_926_p3)) else "0";
    tmp_145_1_fu_706_p2 <= "1" when (unsigned(pool_window_2_V_2_fu_677_p3) < unsigned(pool_window_3_V_2_fu_685_p3)) else "0";
    tmp_145_2_fu_770_p2 <= "1" when (unsigned(pool_window_2_V_3_fu_741_p3) < unsigned(pool_window_3_V_3_fu_749_p3)) else "0";
    tmp_145_3_fu_834_p2 <= "1" when (unsigned(pool_window_2_V_4_fu_805_p3) < unsigned(pool_window_3_V_4_fu_813_p3)) else "0";
    tmp_145_4_fu_898_p2 <= "1" when (unsigned(pool_window_2_V_5_fu_869_p3) < unsigned(pool_window_3_V_5_fu_877_p3)) else "0";
    tmp_145_5_fu_962_p2 <= "1" when (unsigned(pool_window_2_V_6_fu_933_p3) < unsigned(pool_window_3_V_6_fu_941_p3)) else "0";
    tmp_146_1_fu_720_p2 <= "1" when (unsigned(p_phi3_fu_698_p3) < unsigned(p_phi4_fu_712_p3)) else "0";
    tmp_146_2_fu_784_p2 <= "1" when (unsigned(p_phi5_fu_762_p3) < unsigned(p_phi6_fu_776_p3)) else "0";
    tmp_146_3_fu_848_p2 <= "1" when (unsigned(p_phi7_fu_826_p3) < unsigned(p_phi8_fu_840_p3)) else "0";
    tmp_146_4_fu_912_p2 <= "1" when (unsigned(p_phi9_fu_890_p3) < unsigned(p_phi10_fu_904_p3)) else "0";
    tmp_146_5_fu_976_p2 <= "1" when (unsigned(p_phi11_fu_954_p3) < unsigned(p_phi_fu_968_p3)) else "0";
    tmp_16_fu_544_p2 <= "1" when (sX = ap_const_lv32_1) else "0";
    tmp_17_fu_554_p2 <= "1" when (sY = ap_const_lv32_1) else "0";
    tmp_18_fu_564_p2 <= "1" when (signed(pY) > signed(ap_const_lv32_0)) else "0";
    tmp_19_fu_574_p2 <= "1" when (signed(pX) > signed(ap_const_lv32_0)) else "0";
    tmp_20_fu_982_p2 <= "1" when (pX = ap_const_lv32_3) else "0";
    tmp_21_fu_1026_p2 <= "1" when (pY = ap_const_lv32_2) else "0";
    tmp_22_fu_988_p2 <= std_logic_vector(unsigned(pX) + unsigned(ap_const_lv32_1));
    tmp_23_fu_1032_p2 <= std_logic_vector(unsigned(pY) + unsigned(ap_const_lv32_1));
    tmp_25_fu_628_p2 <= "1" when (unsigned(pool_window_0_V_1_fu_598_p3) < unsigned(pool_window_1_V_1_fu_606_p3)) else "0";
    tmp_26_fu_642_p2 <= "1" when (unsigned(pool_window_2_V_1_fu_613_p3) < unsigned(pool_window_3_V_1_fu_621_p3)) else "0";
    tmp_27_fu_1076_p3 <= 
        ap_const_lv2_3 when (tmp_26_reg_1443(0) = '1') else 
        ap_const_lv2_2;
    tmp_28_fu_656_p2 <= "1" when (unsigned(p_phi1_fu_634_p3) < unsigned(p_phi2_fu_648_p3)) else "0";
    tmp_29_fu_1083_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_reg_1438),2));
    tmp_31_fu_1119_p3 <= 
        ap_const_lv2_3 when (tmp_145_1_reg_1478(0) = '1') else 
        ap_const_lv2_2;
    tmp_32_fu_1126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_144_1_reg_1473),2));
    tmp_34_fu_1162_p3 <= 
        ap_const_lv2_3 when (tmp_145_2_reg_1513(0) = '1') else 
        ap_const_lv2_2;
    tmp_35_fu_1169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_144_2_reg_1508),2));
    tmp_37_fu_1205_p3 <= 
        ap_const_lv2_3 when (tmp_145_3_reg_1548(0) = '1') else 
        ap_const_lv2_2;
    tmp_38_fu_1212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_144_3_reg_1543),2));
    tmp_40_fu_1248_p3 <= 
        ap_const_lv2_3 when (tmp_145_4_reg_1583(0) = '1') else 
        ap_const_lv2_2;
    tmp_41_fu_1255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_144_4_reg_1578),2));
    tmp_43_fu_1291_p3 <= 
        ap_const_lv2_3 when (tmp_145_5_reg_1618(0) = '1') else 
        ap_const_lv2_2;
    tmp_44_fu_1298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_144_5_reg_1613),2));
    tmp_data_0_V_fu_1093_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_0_V_1_reg_1418),16));
    tmp_data_0_V_fu_1093_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_1_V_1_reg_1423),16));
    tmp_data_0_V_fu_1093_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_2_V_1_reg_1428),16));
    tmp_data_0_V_fu_1093_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_3_V_1_reg_1433),16));
    tmp_data_0_V_fu_1093_p5 <= 
        tmp_27_fu_1076_p3 when (tmp_28_reg_1448(0) = '1') else 
        tmp_29_fu_1083_p1;
    tmp_data_1_V_fu_1136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_0_V_2_reg_1453),16));
    tmp_data_1_V_fu_1136_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_1_V_2_reg_1458),16));
    tmp_data_1_V_fu_1136_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_2_V_2_reg_1463),16));
    tmp_data_1_V_fu_1136_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_3_V_2_reg_1468),16));
    tmp_data_1_V_fu_1136_p5 <= 
        tmp_31_fu_1119_p3 when (tmp_146_1_reg_1483(0) = '1') else 
        tmp_32_fu_1126_p1;
    tmp_data_2_V_fu_1179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_0_V_3_reg_1488),16));
    tmp_data_2_V_fu_1179_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_1_V_3_reg_1493),16));
    tmp_data_2_V_fu_1179_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_2_V_3_reg_1498),16));
    tmp_data_2_V_fu_1179_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_3_V_3_reg_1503),16));
    tmp_data_2_V_fu_1179_p5 <= 
        tmp_34_fu_1162_p3 when (tmp_146_2_reg_1518(0) = '1') else 
        tmp_35_fu_1169_p1;
    tmp_data_3_V_fu_1222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_0_V_4_reg_1523),16));
    tmp_data_3_V_fu_1222_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_1_V_4_reg_1528),16));
    tmp_data_3_V_fu_1222_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_2_V_4_reg_1533),16));
    tmp_data_3_V_fu_1222_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_3_V_4_reg_1538),16));
    tmp_data_3_V_fu_1222_p5 <= 
        tmp_37_fu_1205_p3 when (tmp_146_3_reg_1553(0) = '1') else 
        tmp_38_fu_1212_p1;
    tmp_data_4_V_fu_1265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_0_V_5_reg_1558),16));
    tmp_data_4_V_fu_1265_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_1_V_5_reg_1563),16));
    tmp_data_4_V_fu_1265_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_2_V_5_reg_1568),16));
    tmp_data_4_V_fu_1265_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_3_V_5_reg_1573),16));
    tmp_data_4_V_fu_1265_p5 <= 
        tmp_40_fu_1248_p3 when (tmp_146_4_reg_1588(0) = '1') else 
        tmp_41_fu_1255_p1;
    tmp_data_5_V_fu_1308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_0_V_6_reg_1593),16));
    tmp_data_5_V_fu_1308_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_1_V_6_reg_1598),16));
    tmp_data_5_V_fu_1308_p3 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_2_V_6_reg_1603),16));
    tmp_data_5_V_fu_1308_p4 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pool_window_3_V_6_reg_1608),16));
    tmp_data_5_V_fu_1308_p5 <= 
        tmp_43_fu_1291_p3 when (tmp_146_5_reg_1623(0) = '1') else 
        tmp_44_fu_1298_p1;
end behav;
